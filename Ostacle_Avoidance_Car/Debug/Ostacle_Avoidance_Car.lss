
Ostacle_Avoidance_Car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000028f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000042  00800060  000028f2  00002986  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  008000a2  008000a2  000029c8  2**0
                  ALLOC
  3 .stab         000021c0  00000000  00000000  000029c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d0f  00000000  00000000  00004b88  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00005897  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  000059f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00005b86  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00007bcb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00008ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00009c50  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  00009dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000a092  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a920  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 7e 07 	jmp	0xefc	; 0xefc <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 d3 07 	jmp	0xfa6	; 0xfa6 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ef       	ldi	r30, 0xF2	; 242
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3a       	cpi	r26, 0xA2	; 162
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 ea       	ldi	r26, 0xA2	; 162
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3a       	cpi	r26, 0xAE	; 174
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <main>
      8a:	0c 94 77 14 	jmp	0x28ee	; 0x28ee <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 40 14 	jmp	0x2880	; 0x2880 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 e9       	ldi	r26, 0x99	; 153
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 4c 14 	jmp	0x2898	; 0x2898 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 68 14 	jmp	0x28d0	; 0x28d0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 4c 14 	jmp	0x2898	; 0x2898 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 68 14 	jmp	0x28d0	; 0x28d0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 40 14 	jmp	0x2880	; 0x2880 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	89 e9       	ldi	r24, 0x99	; 153
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 48 14 	jmp	0x2890	; 0x2890 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	69 e9       	ldi	r22, 0x99	; 153
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 64 14 	jmp	0x28c8	; 0x28c8 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 4c 14 	jmp	0x2898	; 0x2898 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 68 14 	jmp	0x28d0	; 0x28d0 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 4c 14 	jmp	0x2898	; 0x2898 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 68 14 	jmp	0x28d0	; 0x28d0 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 4c 14 	jmp	0x2898	; 0x2898 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 68 14 	jmp	0x28d0	; 0x28d0 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 50 14 	jmp	0x28a0	; 0x28a0 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 6c 14 	jmp	0x28d8	; 0x28d8 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <Ultrasonic_init>:
volatile uint16_t pulse_width = 0 ;
volatile uint8 flage = 0;


void Ultrasonic_init(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	// Set Trigger Pin as Output
	DDRB |= (1 << TRIGGER_PIN);
     ca6:	a7 e3       	ldi	r26, 0x37	; 55
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	e7 e3       	ldi	r30, 0x37	; 55
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	80 62       	ori	r24, 0x20	; 32
     cb2:	8c 93       	st	X, r24
	// Set Echo Pin as Input
	DDRD &= ~(1 << ECHO_PIN);
     cb4:	a1 e3       	ldi	r26, 0x31	; 49
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	e1 e3       	ldi	r30, 0x31	; 49
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	8b 7f       	andi	r24, 0xFB	; 251
     cc0:	8c 93       	st	X, r24

	// Enable External Interrupt on INT0 (Rising Edge initially)
	MCUCR |= (1 << ISC00) | (1 << ISC01); // Rising edge on INT0
     cc2:	a5 e5       	ldi	r26, 0x55	; 85
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	e5 e5       	ldi	r30, 0x55	; 85
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	83 60       	ori	r24, 0x03	; 3
     cce:	8c 93       	st	X, r24
	GICR |= (1 << INT0);                 // Enable INT0
     cd0:	ab e5       	ldi	r26, 0x5B	; 91
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	eb e5       	ldi	r30, 0x5B	; 91
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	80 64       	ori	r24, 0x40	; 64
     cdc:	8c 93       	st	X, r24

	// Initialize Timer 0 in normal mode with a prescaler of 8
	TCCR0 = (1 << CS01); // Prescaler = 8
     cde:	e3 e5       	ldi	r30, 0x53	; 83
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	82 e0       	ldi	r24, 0x02	; 2
     ce4:	80 83       	st	Z, r24
	TCNT0 = 0;           // Clear Timer 0
     ce6:	e2 e5       	ldi	r30, 0x52	; 82
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	10 82       	st	Z, r1
	TIMSK |= (1 << TOIE0); // Enable Timer 0 overflow interrupt
     cec:	a9 e5       	ldi	r26, 0x59	; 89
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e9 e5       	ldi	r30, 0x59	; 89
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	81 60       	ori	r24, 0x01	; 1
     cf8:	8c 93       	st	X, r24

}
     cfa:	cf 91       	pop	r28
     cfc:	df 91       	pop	r29
     cfe:	08 95       	ret

00000d00 <send_trigger_pulse>:

void send_trigger_pulse(void)
{
     d00:	df 93       	push	r29
     d02:	cf 93       	push	r28
     d04:	cd b7       	in	r28, 0x3d	; 61
     d06:	de b7       	in	r29, 0x3e	; 62
     d08:	68 97       	sbiw	r28, 0x18	; 24
     d0a:	0f b6       	in	r0, 0x3f	; 63
     d0c:	f8 94       	cli
     d0e:	de bf       	out	0x3e, r29	; 62
     d10:	0f be       	out	0x3f, r0	; 63
     d12:	cd bf       	out	0x3d, r28	; 61
	PORTB |= (1 << TRIGGER_PIN);  // Set Trigger Pin High
     d14:	a8 e3       	ldi	r26, 0x38	; 56
     d16:	b0 e0       	ldi	r27, 0x00	; 0
     d18:	e8 e3       	ldi	r30, 0x38	; 56
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	80 81       	ld	r24, Z
     d1e:	80 62       	ori	r24, 0x20	; 32
     d20:	8c 93       	st	X, r24
     d22:	80 e0       	ldi	r24, 0x00	; 0
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	a0 e2       	ldi	r26, 0x20	; 32
     d28:	b1 e4       	ldi	r27, 0x41	; 65
     d2a:	8d 8b       	std	Y+21, r24	; 0x15
     d2c:	9e 8b       	std	Y+22, r25	; 0x16
     d2e:	af 8b       	std	Y+23, r26	; 0x17
     d30:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     d32:	6d 89       	ldd	r22, Y+21	; 0x15
     d34:	7e 89       	ldd	r23, Y+22	; 0x16
     d36:	8f 89       	ldd	r24, Y+23	; 0x17
     d38:	98 8d       	ldd	r25, Y+24	; 0x18
     d3a:	2b ea       	ldi	r18, 0xAB	; 171
     d3c:	3a ea       	ldi	r19, 0xAA	; 170
     d3e:	4a e2       	ldi	r20, 0x2A	; 42
     d40:	50 e4       	ldi	r21, 0x40	; 64
     d42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d46:	dc 01       	movw	r26, r24
     d48:	cb 01       	movw	r24, r22
     d4a:	89 8b       	std	Y+17, r24	; 0x11
     d4c:	9a 8b       	std	Y+18, r25	; 0x12
     d4e:	ab 8b       	std	Y+19, r26	; 0x13
     d50:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     d52:	69 89       	ldd	r22, Y+17	; 0x11
     d54:	7a 89       	ldd	r23, Y+18	; 0x12
     d56:	8b 89       	ldd	r24, Y+19	; 0x13
     d58:	9c 89       	ldd	r25, Y+20	; 0x14
     d5a:	20 e0       	ldi	r18, 0x00	; 0
     d5c:	30 e0       	ldi	r19, 0x00	; 0
     d5e:	40 e8       	ldi	r20, 0x80	; 128
     d60:	5f e3       	ldi	r21, 0x3F	; 63
     d62:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     d66:	88 23       	and	r24, r24
     d68:	1c f4       	brge	.+6      	; 0xd70 <send_trigger_pulse+0x70>
		__ticks = 1;
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	88 8b       	std	Y+16, r24	; 0x10
     d6e:	91 c0       	rjmp	.+290    	; 0xe92 <send_trigger_pulse+0x192>
	else if (__tmp > 255)
     d70:	69 89       	ldd	r22, Y+17	; 0x11
     d72:	7a 89       	ldd	r23, Y+18	; 0x12
     d74:	8b 89       	ldd	r24, Y+19	; 0x13
     d76:	9c 89       	ldd	r25, Y+20	; 0x14
     d78:	20 e0       	ldi	r18, 0x00	; 0
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	4f e7       	ldi	r20, 0x7F	; 127
     d7e:	53 e4       	ldi	r21, 0x43	; 67
     d80:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     d84:	18 16       	cp	r1, r24
     d86:	0c f0       	brlt	.+2      	; 0xd8a <send_trigger_pulse+0x8a>
     d88:	7b c0       	rjmp	.+246    	; 0xe80 <send_trigger_pulse+0x180>
	{
		_delay_ms(__us / 1000.0);
     d8a:	6d 89       	ldd	r22, Y+21	; 0x15
     d8c:	7e 89       	ldd	r23, Y+22	; 0x16
     d8e:	8f 89       	ldd	r24, Y+23	; 0x17
     d90:	98 8d       	ldd	r25, Y+24	; 0x18
     d92:	20 e0       	ldi	r18, 0x00	; 0
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	4a e7       	ldi	r20, 0x7A	; 122
     d98:	54 e4       	ldi	r21, 0x44	; 68
     d9a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     d9e:	dc 01       	movw	r26, r24
     da0:	cb 01       	movw	r24, r22
     da2:	8c 87       	std	Y+12, r24	; 0x0c
     da4:	9d 87       	std	Y+13, r25	; 0x0d
     da6:	ae 87       	std	Y+14, r26	; 0x0e
     da8:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     daa:	6c 85       	ldd	r22, Y+12	; 0x0c
     dac:	7d 85       	ldd	r23, Y+13	; 0x0d
     dae:	8e 85       	ldd	r24, Y+14	; 0x0e
     db0:	9f 85       	ldd	r25, Y+15	; 0x0f
     db2:	20 e0       	ldi	r18, 0x00	; 0
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	4a ef       	ldi	r20, 0xFA	; 250
     db8:	54 e4       	ldi	r21, 0x44	; 68
     dba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dbe:	dc 01       	movw	r26, r24
     dc0:	cb 01       	movw	r24, r22
     dc2:	88 87       	std	Y+8, r24	; 0x08
     dc4:	99 87       	std	Y+9, r25	; 0x09
     dc6:	aa 87       	std	Y+10, r26	; 0x0a
     dc8:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     dca:	68 85       	ldd	r22, Y+8	; 0x08
     dcc:	79 85       	ldd	r23, Y+9	; 0x09
     dce:	8a 85       	ldd	r24, Y+10	; 0x0a
     dd0:	9b 85       	ldd	r25, Y+11	; 0x0b
     dd2:	20 e0       	ldi	r18, 0x00	; 0
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	40 e8       	ldi	r20, 0x80	; 128
     dd8:	5f e3       	ldi	r21, 0x3F	; 63
     dda:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     dde:	88 23       	and	r24, r24
     de0:	2c f4       	brge	.+10     	; 0xdec <send_trigger_pulse+0xec>
		__ticks = 1;
     de2:	81 e0       	ldi	r24, 0x01	; 1
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	9f 83       	std	Y+7, r25	; 0x07
     de8:	8e 83       	std	Y+6, r24	; 0x06
     dea:	3f c0       	rjmp	.+126    	; 0xe6a <send_trigger_pulse+0x16a>
	else if (__tmp > 65535)
     dec:	68 85       	ldd	r22, Y+8	; 0x08
     dee:	79 85       	ldd	r23, Y+9	; 0x09
     df0:	8a 85       	ldd	r24, Y+10	; 0x0a
     df2:	9b 85       	ldd	r25, Y+11	; 0x0b
     df4:	20 e0       	ldi	r18, 0x00	; 0
     df6:	3f ef       	ldi	r19, 0xFF	; 255
     df8:	4f e7       	ldi	r20, 0x7F	; 127
     dfa:	57 e4       	ldi	r21, 0x47	; 71
     dfc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     e00:	18 16       	cp	r1, r24
     e02:	4c f5       	brge	.+82     	; 0xe56 <send_trigger_pulse+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e04:	6c 85       	ldd	r22, Y+12	; 0x0c
     e06:	7d 85       	ldd	r23, Y+13	; 0x0d
     e08:	8e 85       	ldd	r24, Y+14	; 0x0e
     e0a:	9f 85       	ldd	r25, Y+15	; 0x0f
     e0c:	20 e0       	ldi	r18, 0x00	; 0
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	40 e2       	ldi	r20, 0x20	; 32
     e12:	51 e4       	ldi	r21, 0x41	; 65
     e14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e18:	dc 01       	movw	r26, r24
     e1a:	cb 01       	movw	r24, r22
     e1c:	bc 01       	movw	r22, r24
     e1e:	cd 01       	movw	r24, r26
     e20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e24:	dc 01       	movw	r26, r24
     e26:	cb 01       	movw	r24, r22
     e28:	9f 83       	std	Y+7, r25	; 0x07
     e2a:	8e 83       	std	Y+6, r24	; 0x06
     e2c:	0f c0       	rjmp	.+30     	; 0xe4c <send_trigger_pulse+0x14c>
     e2e:	88 ec       	ldi	r24, 0xC8	; 200
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	9d 83       	std	Y+5, r25	; 0x05
     e34:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e36:	8c 81       	ldd	r24, Y+4	; 0x04
     e38:	9d 81       	ldd	r25, Y+5	; 0x05
     e3a:	01 97       	sbiw	r24, 0x01	; 1
     e3c:	f1 f7       	brne	.-4      	; 0xe3a <send_trigger_pulse+0x13a>
     e3e:	9d 83       	std	Y+5, r25	; 0x05
     e40:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e42:	8e 81       	ldd	r24, Y+6	; 0x06
     e44:	9f 81       	ldd	r25, Y+7	; 0x07
     e46:	01 97       	sbiw	r24, 0x01	; 1
     e48:	9f 83       	std	Y+7, r25	; 0x07
     e4a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e4c:	8e 81       	ldd	r24, Y+6	; 0x06
     e4e:	9f 81       	ldd	r25, Y+7	; 0x07
     e50:	00 97       	sbiw	r24, 0x00	; 0
     e52:	69 f7       	brne	.-38     	; 0xe2e <send_trigger_pulse+0x12e>
     e54:	24 c0       	rjmp	.+72     	; 0xe9e <send_trigger_pulse+0x19e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e56:	68 85       	ldd	r22, Y+8	; 0x08
     e58:	79 85       	ldd	r23, Y+9	; 0x09
     e5a:	8a 85       	ldd	r24, Y+10	; 0x0a
     e5c:	9b 85       	ldd	r25, Y+11	; 0x0b
     e5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e62:	dc 01       	movw	r26, r24
     e64:	cb 01       	movw	r24, r22
     e66:	9f 83       	std	Y+7, r25	; 0x07
     e68:	8e 83       	std	Y+6, r24	; 0x06
     e6a:	8e 81       	ldd	r24, Y+6	; 0x06
     e6c:	9f 81       	ldd	r25, Y+7	; 0x07
     e6e:	9b 83       	std	Y+3, r25	; 0x03
     e70:	8a 83       	std	Y+2, r24	; 0x02
     e72:	8a 81       	ldd	r24, Y+2	; 0x02
     e74:	9b 81       	ldd	r25, Y+3	; 0x03
     e76:	01 97       	sbiw	r24, 0x01	; 1
     e78:	f1 f7       	brne	.-4      	; 0xe76 <send_trigger_pulse+0x176>
     e7a:	9b 83       	std	Y+3, r25	; 0x03
     e7c:	8a 83       	std	Y+2, r24	; 0x02
     e7e:	0f c0       	rjmp	.+30     	; 0xe9e <send_trigger_pulse+0x19e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     e80:	69 89       	ldd	r22, Y+17	; 0x11
     e82:	7a 89       	ldd	r23, Y+18	; 0x12
     e84:	8b 89       	ldd	r24, Y+19	; 0x13
     e86:	9c 89       	ldd	r25, Y+20	; 0x14
     e88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e8c:	dc 01       	movw	r26, r24
     e8e:	cb 01       	movw	r24, r22
     e90:	88 8b       	std	Y+16, r24	; 0x10
     e92:	88 89       	ldd	r24, Y+16	; 0x10
     e94:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     e96:	89 81       	ldd	r24, Y+1	; 0x01
     e98:	8a 95       	dec	r24
     e9a:	f1 f7       	brne	.-4      	; 0xe98 <send_trigger_pulse+0x198>
     e9c:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);                // Wait 10 µs
	PORTB &= ~(1 << TRIGGER_PIN); // Set Trigger Pin Low
     e9e:	a8 e3       	ldi	r26, 0x38	; 56
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	e8 e3       	ldi	r30, 0x38	; 56
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	8f 7d       	andi	r24, 0xDF	; 223
     eaa:	8c 93       	st	X, r24
}
     eac:	68 96       	adiw	r28, 0x18	; 24
     eae:	0f b6       	in	r0, 0x3f	; 63
     eb0:	f8 94       	cli
     eb2:	de bf       	out	0x3e, r29	; 62
     eb4:	0f be       	out	0x3f, r0	; 63
     eb6:	cd bf       	out	0x3d, r28	; 61
     eb8:	cf 91       	pop	r28
     eba:	df 91       	pop	r29
     ebc:	08 95       	ret

00000ebe <Ultrasonic_readDistance>:


uint16 Ultrasonic_readDistance(void)
{
     ebe:	df 93       	push	r29
     ec0:	cf 93       	push	r28
     ec2:	00 d0       	rcall	.+0      	; 0xec4 <Ultrasonic_readDistance+0x6>
     ec4:	cd b7       	in	r28, 0x3d	; 61
     ec6:	de b7       	in	r29, 0x3e	; 62
	uint16 dis;
	send_trigger_pulse();
     ec8:	0e 94 80 06 	call	0xd00	; 0xd00 <send_trigger_pulse>
     ecc:	0c c0       	rjmp	.+24     	; 0xee6 <Ultrasonic_readDistance+0x28>

	while (flage !=1){
	dis = (pulse_width/58) ;
     ece:	80 91 a4 00 	lds	r24, 0x00A4
     ed2:	90 91 a5 00 	lds	r25, 0x00A5
     ed6:	2a e3       	ldi	r18, 0x3A	; 58
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	b9 01       	movw	r22, r18
     edc:	0e 94 0a 14 	call	0x2814	; 0x2814 <__udivmodhi4>
     ee0:	cb 01       	movw	r24, r22
     ee2:	9a 83       	std	Y+2, r25	; 0x02
     ee4:	89 83       	std	Y+1, r24	; 0x01
uint16 Ultrasonic_readDistance(void)
{
	uint16 dis;
	send_trigger_pulse();

	while (flage !=1){
     ee6:	80 91 a6 00 	lds	r24, 0x00A6
     eea:	81 30       	cpi	r24, 0x01	; 1
     eec:	81 f7       	brne	.-32     	; 0xece <Ultrasonic_readDistance+0x10>
	dis = (pulse_width/58) ;
	}
	return dis;
     eee:	89 81       	ldd	r24, Y+1	; 0x01
     ef0:	9a 81       	ldd	r25, Y+2	; 0x02
}
     ef2:	0f 90       	pop	r0
     ef4:	0f 90       	pop	r0
     ef6:	cf 91       	pop	r28
     ef8:	df 91       	pop	r29
     efa:	08 95       	ret

00000efc <__vector_1>:


ISR(INT0_vect)
{
     efc:	1f 92       	push	r1
     efe:	0f 92       	push	r0
     f00:	0f b6       	in	r0, 0x3f	; 63
     f02:	0f 92       	push	r0
     f04:	11 24       	eor	r1, r1
     f06:	2f 93       	push	r18
     f08:	3f 93       	push	r19
     f0a:	8f 93       	push	r24
     f0c:	9f 93       	push	r25
     f0e:	af 93       	push	r26
     f10:	bf 93       	push	r27
     f12:	ef 93       	push	r30
     f14:	ff 93       	push	r31
     f16:	df 93       	push	r29
     f18:	cf 93       	push	r28
     f1a:	cd b7       	in	r28, 0x3d	; 61
     f1c:	de b7       	in	r29, 0x3e	; 62
	static uint8_t edge = 0;
	if (edge == 0) // Rising edge detected
     f1e:	80 91 a7 00 	lds	r24, 0x00A7
     f22:	88 23       	and	r24, r24
     f24:	a1 f4       	brne	.+40     	; 0xf4e <__vector_1+0x52>
	{
		TCNT0 = 0;               // Clear Timer 0
     f26:	e2 e5       	ldi	r30, 0x52	; 82
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	10 82       	st	Z, r1
		timer_overflow_count = 0; // Reset overflow count
     f2c:	10 92 a3 00 	sts	0x00A3, r1
     f30:	10 92 a2 00 	sts	0x00A2, r1
		MCUCR &= ~(1 << ISC00);  // Switch to falling edge
     f34:	a5 e5       	ldi	r26, 0x55	; 85
     f36:	b0 e0       	ldi	r27, 0x00	; 0
     f38:	e5 e5       	ldi	r30, 0x55	; 85
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 81       	ld	r24, Z
     f3e:	8e 7f       	andi	r24, 0xFE	; 254
     f40:	8c 93       	st	X, r24
		edge = 1;
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	80 93 a7 00 	sts	0x00A7, r24
		flage = 0;
     f48:	10 92 a6 00 	sts	0x00A6, r1
     f4c:	1d c0       	rjmp	.+58     	; 0xf88 <__vector_1+0x8c>

	}
	else // Falling edge detected
	{
		pulse_width = (timer_overflow_count * 256 + TCNT0) ; // Calculate pulse width
     f4e:	80 91 a2 00 	lds	r24, 0x00A2
     f52:	90 91 a3 00 	lds	r25, 0x00A3
     f56:	38 2f       	mov	r19, r24
     f58:	22 27       	eor	r18, r18
     f5a:	e2 e5       	ldi	r30, 0x52	; 82
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	88 2f       	mov	r24, r24
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	82 0f       	add	r24, r18
     f66:	93 1f       	adc	r25, r19
     f68:	90 93 a5 00 	sts	0x00A5, r25
     f6c:	80 93 a4 00 	sts	0x00A4, r24
		flage = 1;
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	80 93 a6 00 	sts	0x00A6, r24
		MCUCR |= (1 << ISC00);  // Switch back to rising edge
     f76:	a5 e5       	ldi	r26, 0x55	; 85
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	e5 e5       	ldi	r30, 0x55	; 85
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	81 60       	ori	r24, 0x01	; 1
     f82:	8c 93       	st	X, r24
		edge = 0;
     f84:	10 92 a7 00 	sts	0x00A7, r1
	}
}
     f88:	cf 91       	pop	r28
     f8a:	df 91       	pop	r29
     f8c:	ff 91       	pop	r31
     f8e:	ef 91       	pop	r30
     f90:	bf 91       	pop	r27
     f92:	af 91       	pop	r26
     f94:	9f 91       	pop	r25
     f96:	8f 91       	pop	r24
     f98:	3f 91       	pop	r19
     f9a:	2f 91       	pop	r18
     f9c:	0f 90       	pop	r0
     f9e:	0f be       	out	0x3f, r0	; 63
     fa0:	0f 90       	pop	r0
     fa2:	1f 90       	pop	r1
     fa4:	18 95       	reti

00000fa6 <__vector_11>:

ISR(TIMER0_OVF_vect)
{
     fa6:	1f 92       	push	r1
     fa8:	0f 92       	push	r0
     faa:	0f b6       	in	r0, 0x3f	; 63
     fac:	0f 92       	push	r0
     fae:	11 24       	eor	r1, r1
     fb0:	8f 93       	push	r24
     fb2:	9f 93       	push	r25
     fb4:	df 93       	push	r29
     fb6:	cf 93       	push	r28
     fb8:	cd b7       	in	r28, 0x3d	; 61
     fba:	de b7       	in	r29, 0x3e	; 62
	timer_overflow_count++; // Increment overflow count
     fbc:	80 91 a2 00 	lds	r24, 0x00A2
     fc0:	90 91 a3 00 	lds	r25, 0x00A3
     fc4:	01 96       	adiw	r24, 0x01	; 1
     fc6:	90 93 a3 00 	sts	0x00A3, r25
     fca:	80 93 a2 00 	sts	0x00A2, r24
}
     fce:	cf 91       	pop	r28
     fd0:	df 91       	pop	r29
     fd2:	9f 91       	pop	r25
     fd4:	8f 91       	pop	r24
     fd6:	0f 90       	pop	r0
     fd8:	0f be       	out	0x3f, r0	; 63
     fda:	0f 90       	pop	r0
     fdc:	1f 90       	pop	r1
     fde:	18 95       	reti

00000fe0 <LCD_sendCommmand>:




void LCD_sendCommmand(uint8 command)
{
     fe0:	df 93       	push	r29
     fe2:	cf 93       	push	r28
     fe4:	cd b7       	in	r28, 0x3d	; 61
     fe6:	de b7       	in	r29, 0x3e	; 62
     fe8:	e9 97       	sbiw	r28, 0x39	; 57
     fea:	0f b6       	in	r0, 0x3f	; 63
     fec:	f8 94       	cli
     fee:	de bf       	out	0x3e, r29	; 62
     ff0:	0f be       	out	0x3f, r0	; 63
     ff2:	cd bf       	out	0x3d, r28	; 61
     ff4:	89 af       	std	Y+57, r24	; 0x39
	/* RS = 0 for command  */
	GPIO_writePin(PORT_RS , PIN_RS , LOGIC_LOW);
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	60 e0       	ldi	r22, 0x00	; 0
     ffa:	40 e0       	ldi	r20, 0x00	; 0
     ffc:	0e 94 b7 11 	call	0x236e	; 0x236e <GPIO_writePin>
    1000:	80 e0       	ldi	r24, 0x00	; 0
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	a0 e8       	ldi	r26, 0x80	; 128
    1006:	bf e3       	ldi	r27, 0x3F	; 63
    1008:	8d ab       	std	Y+53, r24	; 0x35
    100a:	9e ab       	std	Y+54, r25	; 0x36
    100c:	af ab       	std	Y+55, r26	; 0x37
    100e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1010:	6d a9       	ldd	r22, Y+53	; 0x35
    1012:	7e a9       	ldd	r23, Y+54	; 0x36
    1014:	8f a9       	ldd	r24, Y+55	; 0x37
    1016:	98 ad       	ldd	r25, Y+56	; 0x38
    1018:	20 e0       	ldi	r18, 0x00	; 0
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	4a ef       	ldi	r20, 0xFA	; 250
    101e:	54 e4       	ldi	r21, 0x44	; 68
    1020:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1024:	dc 01       	movw	r26, r24
    1026:	cb 01       	movw	r24, r22
    1028:	89 ab       	std	Y+49, r24	; 0x31
    102a:	9a ab       	std	Y+50, r25	; 0x32
    102c:	ab ab       	std	Y+51, r26	; 0x33
    102e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1030:	69 a9       	ldd	r22, Y+49	; 0x31
    1032:	7a a9       	ldd	r23, Y+50	; 0x32
    1034:	8b a9       	ldd	r24, Y+51	; 0x33
    1036:	9c a9       	ldd	r25, Y+52	; 0x34
    1038:	20 e0       	ldi	r18, 0x00	; 0
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	40 e8       	ldi	r20, 0x80	; 128
    103e:	5f e3       	ldi	r21, 0x3F	; 63
    1040:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1044:	88 23       	and	r24, r24
    1046:	2c f4       	brge	.+10     	; 0x1052 <LCD_sendCommmand+0x72>
		__ticks = 1;
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	98 ab       	std	Y+48, r25	; 0x30
    104e:	8f a7       	std	Y+47, r24	; 0x2f
    1050:	3f c0       	rjmp	.+126    	; 0x10d0 <LCD_sendCommmand+0xf0>
	else if (__tmp > 65535)
    1052:	69 a9       	ldd	r22, Y+49	; 0x31
    1054:	7a a9       	ldd	r23, Y+50	; 0x32
    1056:	8b a9       	ldd	r24, Y+51	; 0x33
    1058:	9c a9       	ldd	r25, Y+52	; 0x34
    105a:	20 e0       	ldi	r18, 0x00	; 0
    105c:	3f ef       	ldi	r19, 0xFF	; 255
    105e:	4f e7       	ldi	r20, 0x7F	; 127
    1060:	57 e4       	ldi	r21, 0x47	; 71
    1062:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1066:	18 16       	cp	r1, r24
    1068:	4c f5       	brge	.+82     	; 0x10bc <LCD_sendCommmand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    106a:	6d a9       	ldd	r22, Y+53	; 0x35
    106c:	7e a9       	ldd	r23, Y+54	; 0x36
    106e:	8f a9       	ldd	r24, Y+55	; 0x37
    1070:	98 ad       	ldd	r25, Y+56	; 0x38
    1072:	20 e0       	ldi	r18, 0x00	; 0
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	40 e2       	ldi	r20, 0x20	; 32
    1078:	51 e4       	ldi	r21, 0x41	; 65
    107a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    107e:	dc 01       	movw	r26, r24
    1080:	cb 01       	movw	r24, r22
    1082:	bc 01       	movw	r22, r24
    1084:	cd 01       	movw	r24, r26
    1086:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    108a:	dc 01       	movw	r26, r24
    108c:	cb 01       	movw	r24, r22
    108e:	98 ab       	std	Y+48, r25	; 0x30
    1090:	8f a7       	std	Y+47, r24	; 0x2f
    1092:	0f c0       	rjmp	.+30     	; 0x10b2 <LCD_sendCommmand+0xd2>
    1094:	88 ec       	ldi	r24, 0xC8	; 200
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	9e a7       	std	Y+46, r25	; 0x2e
    109a:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    109c:	8d a5       	ldd	r24, Y+45	; 0x2d
    109e:	9e a5       	ldd	r25, Y+46	; 0x2e
    10a0:	01 97       	sbiw	r24, 0x01	; 1
    10a2:	f1 f7       	brne	.-4      	; 0x10a0 <LCD_sendCommmand+0xc0>
    10a4:	9e a7       	std	Y+46, r25	; 0x2e
    10a6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    10aa:	98 a9       	ldd	r25, Y+48	; 0x30
    10ac:	01 97       	sbiw	r24, 0x01	; 1
    10ae:	98 ab       	std	Y+48, r25	; 0x30
    10b0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    10b4:	98 a9       	ldd	r25, Y+48	; 0x30
    10b6:	00 97       	sbiw	r24, 0x00	; 0
    10b8:	69 f7       	brne	.-38     	; 0x1094 <LCD_sendCommmand+0xb4>
    10ba:	14 c0       	rjmp	.+40     	; 0x10e4 <LCD_sendCommmand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10bc:	69 a9       	ldd	r22, Y+49	; 0x31
    10be:	7a a9       	ldd	r23, Y+50	; 0x32
    10c0:	8b a9       	ldd	r24, Y+51	; 0x33
    10c2:	9c a9       	ldd	r25, Y+52	; 0x34
    10c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10c8:	dc 01       	movw	r26, r24
    10ca:	cb 01       	movw	r24, r22
    10cc:	98 ab       	std	Y+48, r25	; 0x30
    10ce:	8f a7       	std	Y+47, r24	; 0x2f
    10d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    10d2:	98 a9       	ldd	r25, Y+48	; 0x30
    10d4:	9c a7       	std	Y+44, r25	; 0x2c
    10d6:	8b a7       	std	Y+43, r24	; 0x2b
    10d8:	8b a5       	ldd	r24, Y+43	; 0x2b
    10da:	9c a5       	ldd	r25, Y+44	; 0x2c
    10dc:	01 97       	sbiw	r24, 0x01	; 1
    10de:	f1 f7       	brne	.-4      	; 0x10dc <LCD_sendCommmand+0xfc>
    10e0:	9c a7       	std	Y+44, r25	; 0x2c
    10e2:	8b a7       	std	Y+43, r24	; 0x2b
	/*delay for tas*/

	_delay_ms(TAS_TIME);

	/*enable PIN0_ID*/
	GPIO_writePin(PORT_E_enabel , PIN_E_enabel , LOGIC_HIGH);
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	61 e0       	ldi	r22, 0x01	; 1
    10e8:	41 e0       	ldi	r20, 0x01	; 1
    10ea:	0e 94 b7 11 	call	0x236e	; 0x236e <GPIO_writePin>
    10ee:	80 e0       	ldi	r24, 0x00	; 0
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	a0 e8       	ldi	r26, 0x80	; 128
    10f4:	bf e3       	ldi	r27, 0x3F	; 63
    10f6:	8f a3       	std	Y+39, r24	; 0x27
    10f8:	98 a7       	std	Y+40, r25	; 0x28
    10fa:	a9 a7       	std	Y+41, r26	; 0x29
    10fc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10fe:	6f a1       	ldd	r22, Y+39	; 0x27
    1100:	78 a5       	ldd	r23, Y+40	; 0x28
    1102:	89 a5       	ldd	r24, Y+41	; 0x29
    1104:	9a a5       	ldd	r25, Y+42	; 0x2a
    1106:	20 e0       	ldi	r18, 0x00	; 0
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	4a ef       	ldi	r20, 0xFA	; 250
    110c:	54 e4       	ldi	r21, 0x44	; 68
    110e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1112:	dc 01       	movw	r26, r24
    1114:	cb 01       	movw	r24, r22
    1116:	8b a3       	std	Y+35, r24	; 0x23
    1118:	9c a3       	std	Y+36, r25	; 0x24
    111a:	ad a3       	std	Y+37, r26	; 0x25
    111c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    111e:	6b a1       	ldd	r22, Y+35	; 0x23
    1120:	7c a1       	ldd	r23, Y+36	; 0x24
    1122:	8d a1       	ldd	r24, Y+37	; 0x25
    1124:	9e a1       	ldd	r25, Y+38	; 0x26
    1126:	20 e0       	ldi	r18, 0x00	; 0
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	40 e8       	ldi	r20, 0x80	; 128
    112c:	5f e3       	ldi	r21, 0x3F	; 63
    112e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1132:	88 23       	and	r24, r24
    1134:	2c f4       	brge	.+10     	; 0x1140 <LCD_sendCommmand+0x160>
		__ticks = 1;
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	9a a3       	std	Y+34, r25	; 0x22
    113c:	89 a3       	std	Y+33, r24	; 0x21
    113e:	3f c0       	rjmp	.+126    	; 0x11be <LCD_sendCommmand+0x1de>
	else if (__tmp > 65535)
    1140:	6b a1       	ldd	r22, Y+35	; 0x23
    1142:	7c a1       	ldd	r23, Y+36	; 0x24
    1144:	8d a1       	ldd	r24, Y+37	; 0x25
    1146:	9e a1       	ldd	r25, Y+38	; 0x26
    1148:	20 e0       	ldi	r18, 0x00	; 0
    114a:	3f ef       	ldi	r19, 0xFF	; 255
    114c:	4f e7       	ldi	r20, 0x7F	; 127
    114e:	57 e4       	ldi	r21, 0x47	; 71
    1150:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1154:	18 16       	cp	r1, r24
    1156:	4c f5       	brge	.+82     	; 0x11aa <LCD_sendCommmand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1158:	6f a1       	ldd	r22, Y+39	; 0x27
    115a:	78 a5       	ldd	r23, Y+40	; 0x28
    115c:	89 a5       	ldd	r24, Y+41	; 0x29
    115e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1160:	20 e0       	ldi	r18, 0x00	; 0
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	40 e2       	ldi	r20, 0x20	; 32
    1166:	51 e4       	ldi	r21, 0x41	; 65
    1168:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    116c:	dc 01       	movw	r26, r24
    116e:	cb 01       	movw	r24, r22
    1170:	bc 01       	movw	r22, r24
    1172:	cd 01       	movw	r24, r26
    1174:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1178:	dc 01       	movw	r26, r24
    117a:	cb 01       	movw	r24, r22
    117c:	9a a3       	std	Y+34, r25	; 0x22
    117e:	89 a3       	std	Y+33, r24	; 0x21
    1180:	0f c0       	rjmp	.+30     	; 0x11a0 <LCD_sendCommmand+0x1c0>
    1182:	88 ec       	ldi	r24, 0xC8	; 200
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	98 a3       	std	Y+32, r25	; 0x20
    1188:	8f 8f       	std	Y+31, r24	; 0x1f
    118a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    118c:	98 a1       	ldd	r25, Y+32	; 0x20
    118e:	01 97       	sbiw	r24, 0x01	; 1
    1190:	f1 f7       	brne	.-4      	; 0x118e <LCD_sendCommmand+0x1ae>
    1192:	98 a3       	std	Y+32, r25	; 0x20
    1194:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1196:	89 a1       	ldd	r24, Y+33	; 0x21
    1198:	9a a1       	ldd	r25, Y+34	; 0x22
    119a:	01 97       	sbiw	r24, 0x01	; 1
    119c:	9a a3       	std	Y+34, r25	; 0x22
    119e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11a0:	89 a1       	ldd	r24, Y+33	; 0x21
    11a2:	9a a1       	ldd	r25, Y+34	; 0x22
    11a4:	00 97       	sbiw	r24, 0x00	; 0
    11a6:	69 f7       	brne	.-38     	; 0x1182 <LCD_sendCommmand+0x1a2>
    11a8:	14 c0       	rjmp	.+40     	; 0x11d2 <LCD_sendCommmand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11aa:	6b a1       	ldd	r22, Y+35	; 0x23
    11ac:	7c a1       	ldd	r23, Y+36	; 0x24
    11ae:	8d a1       	ldd	r24, Y+37	; 0x25
    11b0:	9e a1       	ldd	r25, Y+38	; 0x26
    11b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11b6:	dc 01       	movw	r26, r24
    11b8:	cb 01       	movw	r24, r22
    11ba:	9a a3       	std	Y+34, r25	; 0x22
    11bc:	89 a3       	std	Y+33, r24	; 0x21
    11be:	89 a1       	ldd	r24, Y+33	; 0x21
    11c0:	9a a1       	ldd	r25, Y+34	; 0x22
    11c2:	9e 8f       	std	Y+30, r25	; 0x1e
    11c4:	8d 8f       	std	Y+29, r24	; 0x1d
    11c6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11c8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    11ca:	01 97       	sbiw	r24, 0x01	; 1
    11cc:	f1 f7       	brne	.-4      	; 0x11ca <LCD_sendCommmand+0x1ea>
    11ce:	9e 8f       	std	Y+30, r25	; 0x1e
    11d0:	8d 8f       	std	Y+29, r24	; 0x1d

	/*delay for tpw*/
	_delay_ms(TPW_TIME);

#if(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(PORT_LCD,command);
    11d2:	80 e0       	ldi	r24, 0x00	; 0
    11d4:	69 ad       	ldd	r22, Y+57	; 0x39
    11d6:	0e 94 81 13 	call	0x2702	; 0x2702 <GPIO_writePort>
    11da:	80 e0       	ldi	r24, 0x00	; 0
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	a0 e8       	ldi	r26, 0x80	; 128
    11e0:	bf e3       	ldi	r27, 0x3F	; 63
    11e2:	89 8f       	std	Y+25, r24	; 0x19
    11e4:	9a 8f       	std	Y+26, r25	; 0x1a
    11e6:	ab 8f       	std	Y+27, r26	; 0x1b
    11e8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11ea:	69 8d       	ldd	r22, Y+25	; 0x19
    11ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11f2:	20 e0       	ldi	r18, 0x00	; 0
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	4a ef       	ldi	r20, 0xFA	; 250
    11f8:	54 e4       	ldi	r21, 0x44	; 68
    11fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11fe:	dc 01       	movw	r26, r24
    1200:	cb 01       	movw	r24, r22
    1202:	8d 8b       	std	Y+21, r24	; 0x15
    1204:	9e 8b       	std	Y+22, r25	; 0x16
    1206:	af 8b       	std	Y+23, r26	; 0x17
    1208:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    120a:	6d 89       	ldd	r22, Y+21	; 0x15
    120c:	7e 89       	ldd	r23, Y+22	; 0x16
    120e:	8f 89       	ldd	r24, Y+23	; 0x17
    1210:	98 8d       	ldd	r25, Y+24	; 0x18
    1212:	20 e0       	ldi	r18, 0x00	; 0
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	40 e8       	ldi	r20, 0x80	; 128
    1218:	5f e3       	ldi	r21, 0x3F	; 63
    121a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    121e:	88 23       	and	r24, r24
    1220:	2c f4       	brge	.+10     	; 0x122c <LCD_sendCommmand+0x24c>
		__ticks = 1;
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	9c 8b       	std	Y+20, r25	; 0x14
    1228:	8b 8b       	std	Y+19, r24	; 0x13
    122a:	3f c0       	rjmp	.+126    	; 0x12aa <LCD_sendCommmand+0x2ca>
	else if (__tmp > 65535)
    122c:	6d 89       	ldd	r22, Y+21	; 0x15
    122e:	7e 89       	ldd	r23, Y+22	; 0x16
    1230:	8f 89       	ldd	r24, Y+23	; 0x17
    1232:	98 8d       	ldd	r25, Y+24	; 0x18
    1234:	20 e0       	ldi	r18, 0x00	; 0
    1236:	3f ef       	ldi	r19, 0xFF	; 255
    1238:	4f e7       	ldi	r20, 0x7F	; 127
    123a:	57 e4       	ldi	r21, 0x47	; 71
    123c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1240:	18 16       	cp	r1, r24
    1242:	4c f5       	brge	.+82     	; 0x1296 <LCD_sendCommmand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1244:	69 8d       	ldd	r22, Y+25	; 0x19
    1246:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1248:	8b 8d       	ldd	r24, Y+27	; 0x1b
    124a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    124c:	20 e0       	ldi	r18, 0x00	; 0
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	40 e2       	ldi	r20, 0x20	; 32
    1252:	51 e4       	ldi	r21, 0x41	; 65
    1254:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1258:	dc 01       	movw	r26, r24
    125a:	cb 01       	movw	r24, r22
    125c:	bc 01       	movw	r22, r24
    125e:	cd 01       	movw	r24, r26
    1260:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1264:	dc 01       	movw	r26, r24
    1266:	cb 01       	movw	r24, r22
    1268:	9c 8b       	std	Y+20, r25	; 0x14
    126a:	8b 8b       	std	Y+19, r24	; 0x13
    126c:	0f c0       	rjmp	.+30     	; 0x128c <LCD_sendCommmand+0x2ac>
    126e:	88 ec       	ldi	r24, 0xC8	; 200
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	9a 8b       	std	Y+18, r25	; 0x12
    1274:	89 8b       	std	Y+17, r24	; 0x11
    1276:	89 89       	ldd	r24, Y+17	; 0x11
    1278:	9a 89       	ldd	r25, Y+18	; 0x12
    127a:	01 97       	sbiw	r24, 0x01	; 1
    127c:	f1 f7       	brne	.-4      	; 0x127a <LCD_sendCommmand+0x29a>
    127e:	9a 8b       	std	Y+18, r25	; 0x12
    1280:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1282:	8b 89       	ldd	r24, Y+19	; 0x13
    1284:	9c 89       	ldd	r25, Y+20	; 0x14
    1286:	01 97       	sbiw	r24, 0x01	; 1
    1288:	9c 8b       	std	Y+20, r25	; 0x14
    128a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    128c:	8b 89       	ldd	r24, Y+19	; 0x13
    128e:	9c 89       	ldd	r25, Y+20	; 0x14
    1290:	00 97       	sbiw	r24, 0x00	; 0
    1292:	69 f7       	brne	.-38     	; 0x126e <LCD_sendCommmand+0x28e>
    1294:	14 c0       	rjmp	.+40     	; 0x12be <LCD_sendCommmand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1296:	6d 89       	ldd	r22, Y+21	; 0x15
    1298:	7e 89       	ldd	r23, Y+22	; 0x16
    129a:	8f 89       	ldd	r24, Y+23	; 0x17
    129c:	98 8d       	ldd	r25, Y+24	; 0x18
    129e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12a2:	dc 01       	movw	r26, r24
    12a4:	cb 01       	movw	r24, r22
    12a6:	9c 8b       	std	Y+20, r25	; 0x14
    12a8:	8b 8b       	std	Y+19, r24	; 0x13
    12aa:	8b 89       	ldd	r24, Y+19	; 0x13
    12ac:	9c 89       	ldd	r25, Y+20	; 0x14
    12ae:	98 8b       	std	Y+16, r25	; 0x10
    12b0:	8f 87       	std	Y+15, r24	; 0x0f
    12b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    12b4:	98 89       	ldd	r25, Y+16	; 0x10
    12b6:	01 97       	sbiw	r24, 0x01	; 1
    12b8:	f1 f7       	brne	.-4      	; 0x12b6 <LCD_sendCommmand+0x2d6>
    12ba:	98 8b       	std	Y+16, r25	; 0x10
    12bc:	8f 87       	std	Y+15, r24	; 0x0f


#endif
	_delay_ms(1);

	GPIO_writePin(PORT_E_enabel , PIN_E_enabel , LOGIC_LOW);
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	61 e0       	ldi	r22, 0x01	; 1
    12c2:	40 e0       	ldi	r20, 0x00	; 0
    12c4:	0e 94 b7 11 	call	0x236e	; 0x236e <GPIO_writePin>
    12c8:	80 e0       	ldi	r24, 0x00	; 0
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	a0 e8       	ldi	r26, 0x80	; 128
    12ce:	bf e3       	ldi	r27, 0x3F	; 63
    12d0:	8b 87       	std	Y+11, r24	; 0x0b
    12d2:	9c 87       	std	Y+12, r25	; 0x0c
    12d4:	ad 87       	std	Y+13, r26	; 0x0d
    12d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    12da:	7c 85       	ldd	r23, Y+12	; 0x0c
    12dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    12de:	9e 85       	ldd	r25, Y+14	; 0x0e
    12e0:	20 e0       	ldi	r18, 0x00	; 0
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	4a ef       	ldi	r20, 0xFA	; 250
    12e6:	54 e4       	ldi	r21, 0x44	; 68
    12e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12ec:	dc 01       	movw	r26, r24
    12ee:	cb 01       	movw	r24, r22
    12f0:	8f 83       	std	Y+7, r24	; 0x07
    12f2:	98 87       	std	Y+8, r25	; 0x08
    12f4:	a9 87       	std	Y+9, r26	; 0x09
    12f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12f8:	6f 81       	ldd	r22, Y+7	; 0x07
    12fa:	78 85       	ldd	r23, Y+8	; 0x08
    12fc:	89 85       	ldd	r24, Y+9	; 0x09
    12fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1300:	20 e0       	ldi	r18, 0x00	; 0
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	40 e8       	ldi	r20, 0x80	; 128
    1306:	5f e3       	ldi	r21, 0x3F	; 63
    1308:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    130c:	88 23       	and	r24, r24
    130e:	2c f4       	brge	.+10     	; 0x131a <LCD_sendCommmand+0x33a>
		__ticks = 1;
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	9e 83       	std	Y+6, r25	; 0x06
    1316:	8d 83       	std	Y+5, r24	; 0x05
    1318:	3f c0       	rjmp	.+126    	; 0x1398 <LCD_sendCommmand+0x3b8>
	else if (__tmp > 65535)
    131a:	6f 81       	ldd	r22, Y+7	; 0x07
    131c:	78 85       	ldd	r23, Y+8	; 0x08
    131e:	89 85       	ldd	r24, Y+9	; 0x09
    1320:	9a 85       	ldd	r25, Y+10	; 0x0a
    1322:	20 e0       	ldi	r18, 0x00	; 0
    1324:	3f ef       	ldi	r19, 0xFF	; 255
    1326:	4f e7       	ldi	r20, 0x7F	; 127
    1328:	57 e4       	ldi	r21, 0x47	; 71
    132a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    132e:	18 16       	cp	r1, r24
    1330:	4c f5       	brge	.+82     	; 0x1384 <LCD_sendCommmand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1332:	6b 85       	ldd	r22, Y+11	; 0x0b
    1334:	7c 85       	ldd	r23, Y+12	; 0x0c
    1336:	8d 85       	ldd	r24, Y+13	; 0x0d
    1338:	9e 85       	ldd	r25, Y+14	; 0x0e
    133a:	20 e0       	ldi	r18, 0x00	; 0
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	40 e2       	ldi	r20, 0x20	; 32
    1340:	51 e4       	ldi	r21, 0x41	; 65
    1342:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1346:	dc 01       	movw	r26, r24
    1348:	cb 01       	movw	r24, r22
    134a:	bc 01       	movw	r22, r24
    134c:	cd 01       	movw	r24, r26
    134e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1352:	dc 01       	movw	r26, r24
    1354:	cb 01       	movw	r24, r22
    1356:	9e 83       	std	Y+6, r25	; 0x06
    1358:	8d 83       	std	Y+5, r24	; 0x05
    135a:	0f c0       	rjmp	.+30     	; 0x137a <LCD_sendCommmand+0x39a>
    135c:	88 ec       	ldi	r24, 0xC8	; 200
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	9c 83       	std	Y+4, r25	; 0x04
    1362:	8b 83       	std	Y+3, r24	; 0x03
    1364:	8b 81       	ldd	r24, Y+3	; 0x03
    1366:	9c 81       	ldd	r25, Y+4	; 0x04
    1368:	01 97       	sbiw	r24, 0x01	; 1
    136a:	f1 f7       	brne	.-4      	; 0x1368 <LCD_sendCommmand+0x388>
    136c:	9c 83       	std	Y+4, r25	; 0x04
    136e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1370:	8d 81       	ldd	r24, Y+5	; 0x05
    1372:	9e 81       	ldd	r25, Y+6	; 0x06
    1374:	01 97       	sbiw	r24, 0x01	; 1
    1376:	9e 83       	std	Y+6, r25	; 0x06
    1378:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    137a:	8d 81       	ldd	r24, Y+5	; 0x05
    137c:	9e 81       	ldd	r25, Y+6	; 0x06
    137e:	00 97       	sbiw	r24, 0x00	; 0
    1380:	69 f7       	brne	.-38     	; 0x135c <LCD_sendCommmand+0x37c>
    1382:	14 c0       	rjmp	.+40     	; 0x13ac <LCD_sendCommmand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1384:	6f 81       	ldd	r22, Y+7	; 0x07
    1386:	78 85       	ldd	r23, Y+8	; 0x08
    1388:	89 85       	ldd	r24, Y+9	; 0x09
    138a:	9a 85       	ldd	r25, Y+10	; 0x0a
    138c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1390:	dc 01       	movw	r26, r24
    1392:	cb 01       	movw	r24, r22
    1394:	9e 83       	std	Y+6, r25	; 0x06
    1396:	8d 83       	std	Y+5, r24	; 0x05
    1398:	8d 81       	ldd	r24, Y+5	; 0x05
    139a:	9e 81       	ldd	r25, Y+6	; 0x06
    139c:	9a 83       	std	Y+2, r25	; 0x02
    139e:	89 83       	std	Y+1, r24	; 0x01
    13a0:	89 81       	ldd	r24, Y+1	; 0x01
    13a2:	9a 81       	ldd	r25, Y+2	; 0x02
    13a4:	01 97       	sbiw	r24, 0x01	; 1
    13a6:	f1 f7       	brne	.-4      	; 0x13a4 <LCD_sendCommmand+0x3c4>
    13a8:	9a 83       	std	Y+2, r25	; 0x02
    13aa:	89 83       	std	Y+1, r24	; 0x01
	/*delay for th*/
	_delay_ms(TH_TIME);



}
    13ac:	e9 96       	adiw	r28, 0x39	; 57
    13ae:	0f b6       	in	r0, 0x3f	; 63
    13b0:	f8 94       	cli
    13b2:	de bf       	out	0x3e, r29	; 62
    13b4:	0f be       	out	0x3f, r0	; 63
    13b6:	cd bf       	out	0x3d, r28	; 61
    13b8:	cf 91       	pop	r28
    13ba:	df 91       	pop	r29
    13bc:	08 95       	ret

000013be <LCD_displayCharcter>:

void LCD_displayCharcter(uint8 Data)
{
    13be:	df 93       	push	r29
    13c0:	cf 93       	push	r28
    13c2:	cd b7       	in	r28, 0x3d	; 61
    13c4:	de b7       	in	r29, 0x3e	; 62
    13c6:	ab 97       	sbiw	r28, 0x2b	; 43
    13c8:	0f b6       	in	r0, 0x3f	; 63
    13ca:	f8 94       	cli
    13cc:	de bf       	out	0x3e, r29	; 62
    13ce:	0f be       	out	0x3f, r0	; 63
    13d0:	cd bf       	out	0x3d, r28	; 61
    13d2:	8b a7       	std	Y+43, r24	; 0x2b
	/* RS = 1 for data transimetion  */
	GPIO_writePin(PORT_RS , PIN_RS , LOGIC_HIGH);
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	60 e0       	ldi	r22, 0x00	; 0
    13d8:	41 e0       	ldi	r20, 0x01	; 1
    13da:	0e 94 b7 11 	call	0x236e	; 0x236e <GPIO_writePin>
    13de:	80 e0       	ldi	r24, 0x00	; 0
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	a0 e8       	ldi	r26, 0x80	; 128
    13e4:	bf e3       	ldi	r27, 0x3F	; 63
    13e6:	8f a3       	std	Y+39, r24	; 0x27
    13e8:	98 a7       	std	Y+40, r25	; 0x28
    13ea:	a9 a7       	std	Y+41, r26	; 0x29
    13ec:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13ee:	6f a1       	ldd	r22, Y+39	; 0x27
    13f0:	78 a5       	ldd	r23, Y+40	; 0x28
    13f2:	89 a5       	ldd	r24, Y+41	; 0x29
    13f4:	9a a5       	ldd	r25, Y+42	; 0x2a
    13f6:	20 e0       	ldi	r18, 0x00	; 0
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	4a ef       	ldi	r20, 0xFA	; 250
    13fc:	54 e4       	ldi	r21, 0x44	; 68
    13fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1402:	dc 01       	movw	r26, r24
    1404:	cb 01       	movw	r24, r22
    1406:	8b a3       	std	Y+35, r24	; 0x23
    1408:	9c a3       	std	Y+36, r25	; 0x24
    140a:	ad a3       	std	Y+37, r26	; 0x25
    140c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    140e:	6b a1       	ldd	r22, Y+35	; 0x23
    1410:	7c a1       	ldd	r23, Y+36	; 0x24
    1412:	8d a1       	ldd	r24, Y+37	; 0x25
    1414:	9e a1       	ldd	r25, Y+38	; 0x26
    1416:	20 e0       	ldi	r18, 0x00	; 0
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	40 e8       	ldi	r20, 0x80	; 128
    141c:	5f e3       	ldi	r21, 0x3F	; 63
    141e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1422:	88 23       	and	r24, r24
    1424:	2c f4       	brge	.+10     	; 0x1430 <LCD_displayCharcter+0x72>
		__ticks = 1;
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	9a a3       	std	Y+34, r25	; 0x22
    142c:	89 a3       	std	Y+33, r24	; 0x21
    142e:	3f c0       	rjmp	.+126    	; 0x14ae <LCD_displayCharcter+0xf0>
	else if (__tmp > 65535)
    1430:	6b a1       	ldd	r22, Y+35	; 0x23
    1432:	7c a1       	ldd	r23, Y+36	; 0x24
    1434:	8d a1       	ldd	r24, Y+37	; 0x25
    1436:	9e a1       	ldd	r25, Y+38	; 0x26
    1438:	20 e0       	ldi	r18, 0x00	; 0
    143a:	3f ef       	ldi	r19, 0xFF	; 255
    143c:	4f e7       	ldi	r20, 0x7F	; 127
    143e:	57 e4       	ldi	r21, 0x47	; 71
    1440:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1444:	18 16       	cp	r1, r24
    1446:	4c f5       	brge	.+82     	; 0x149a <LCD_displayCharcter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1448:	6f a1       	ldd	r22, Y+39	; 0x27
    144a:	78 a5       	ldd	r23, Y+40	; 0x28
    144c:	89 a5       	ldd	r24, Y+41	; 0x29
    144e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1450:	20 e0       	ldi	r18, 0x00	; 0
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	40 e2       	ldi	r20, 0x20	; 32
    1456:	51 e4       	ldi	r21, 0x41	; 65
    1458:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    145c:	dc 01       	movw	r26, r24
    145e:	cb 01       	movw	r24, r22
    1460:	bc 01       	movw	r22, r24
    1462:	cd 01       	movw	r24, r26
    1464:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1468:	dc 01       	movw	r26, r24
    146a:	cb 01       	movw	r24, r22
    146c:	9a a3       	std	Y+34, r25	; 0x22
    146e:	89 a3       	std	Y+33, r24	; 0x21
    1470:	0f c0       	rjmp	.+30     	; 0x1490 <LCD_displayCharcter+0xd2>
    1472:	88 ec       	ldi	r24, 0xC8	; 200
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	98 a3       	std	Y+32, r25	; 0x20
    1478:	8f 8f       	std	Y+31, r24	; 0x1f
    147a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    147c:	98 a1       	ldd	r25, Y+32	; 0x20
    147e:	01 97       	sbiw	r24, 0x01	; 1
    1480:	f1 f7       	brne	.-4      	; 0x147e <LCD_displayCharcter+0xc0>
    1482:	98 a3       	std	Y+32, r25	; 0x20
    1484:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1486:	89 a1       	ldd	r24, Y+33	; 0x21
    1488:	9a a1       	ldd	r25, Y+34	; 0x22
    148a:	01 97       	sbiw	r24, 0x01	; 1
    148c:	9a a3       	std	Y+34, r25	; 0x22
    148e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1490:	89 a1       	ldd	r24, Y+33	; 0x21
    1492:	9a a1       	ldd	r25, Y+34	; 0x22
    1494:	00 97       	sbiw	r24, 0x00	; 0
    1496:	69 f7       	brne	.-38     	; 0x1472 <LCD_displayCharcter+0xb4>
    1498:	14 c0       	rjmp	.+40     	; 0x14c2 <LCD_displayCharcter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    149a:	6b a1       	ldd	r22, Y+35	; 0x23
    149c:	7c a1       	ldd	r23, Y+36	; 0x24
    149e:	8d a1       	ldd	r24, Y+37	; 0x25
    14a0:	9e a1       	ldd	r25, Y+38	; 0x26
    14a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14a6:	dc 01       	movw	r26, r24
    14a8:	cb 01       	movw	r24, r22
    14aa:	9a a3       	std	Y+34, r25	; 0x22
    14ac:	89 a3       	std	Y+33, r24	; 0x21
    14ae:	89 a1       	ldd	r24, Y+33	; 0x21
    14b0:	9a a1       	ldd	r25, Y+34	; 0x22
    14b2:	9e 8f       	std	Y+30, r25	; 0x1e
    14b4:	8d 8f       	std	Y+29, r24	; 0x1d
    14b6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14b8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    14ba:	01 97       	sbiw	r24, 0x01	; 1
    14bc:	f1 f7       	brne	.-4      	; 0x14ba <LCD_displayCharcter+0xfc>
    14be:	9e 8f       	std	Y+30, r25	; 0x1e
    14c0:	8d 8f       	std	Y+29, r24	; 0x1d
	/*delay for tas*/
	_delay_ms(TAS_TIME);
	/*enable E*/
	GPIO_writePin(PORT_E_enabel , PIN_E_enabel , LOGIC_HIGH);
    14c2:	81 e0       	ldi	r24, 0x01	; 1
    14c4:	61 e0       	ldi	r22, 0x01	; 1
    14c6:	41 e0       	ldi	r20, 0x01	; 1
    14c8:	0e 94 b7 11 	call	0x236e	; 0x236e <GPIO_writePin>
    14cc:	80 e0       	ldi	r24, 0x00	; 0
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	a0 e8       	ldi	r26, 0x80	; 128
    14d2:	bf e3       	ldi	r27, 0x3F	; 63
    14d4:	89 8f       	std	Y+25, r24	; 0x19
    14d6:	9a 8f       	std	Y+26, r25	; 0x1a
    14d8:	ab 8f       	std	Y+27, r26	; 0x1b
    14da:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14dc:	69 8d       	ldd	r22, Y+25	; 0x19
    14de:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14e4:	20 e0       	ldi	r18, 0x00	; 0
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	4a ef       	ldi	r20, 0xFA	; 250
    14ea:	54 e4       	ldi	r21, 0x44	; 68
    14ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14f0:	dc 01       	movw	r26, r24
    14f2:	cb 01       	movw	r24, r22
    14f4:	8d 8b       	std	Y+21, r24	; 0x15
    14f6:	9e 8b       	std	Y+22, r25	; 0x16
    14f8:	af 8b       	std	Y+23, r26	; 0x17
    14fa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    14fc:	6d 89       	ldd	r22, Y+21	; 0x15
    14fe:	7e 89       	ldd	r23, Y+22	; 0x16
    1500:	8f 89       	ldd	r24, Y+23	; 0x17
    1502:	98 8d       	ldd	r25, Y+24	; 0x18
    1504:	20 e0       	ldi	r18, 0x00	; 0
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	40 e8       	ldi	r20, 0x80	; 128
    150a:	5f e3       	ldi	r21, 0x3F	; 63
    150c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1510:	88 23       	and	r24, r24
    1512:	2c f4       	brge	.+10     	; 0x151e <LCD_displayCharcter+0x160>
		__ticks = 1;
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	9c 8b       	std	Y+20, r25	; 0x14
    151a:	8b 8b       	std	Y+19, r24	; 0x13
    151c:	3f c0       	rjmp	.+126    	; 0x159c <LCD_displayCharcter+0x1de>
	else if (__tmp > 65535)
    151e:	6d 89       	ldd	r22, Y+21	; 0x15
    1520:	7e 89       	ldd	r23, Y+22	; 0x16
    1522:	8f 89       	ldd	r24, Y+23	; 0x17
    1524:	98 8d       	ldd	r25, Y+24	; 0x18
    1526:	20 e0       	ldi	r18, 0x00	; 0
    1528:	3f ef       	ldi	r19, 0xFF	; 255
    152a:	4f e7       	ldi	r20, 0x7F	; 127
    152c:	57 e4       	ldi	r21, 0x47	; 71
    152e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1532:	18 16       	cp	r1, r24
    1534:	4c f5       	brge	.+82     	; 0x1588 <LCD_displayCharcter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1536:	69 8d       	ldd	r22, Y+25	; 0x19
    1538:	7a 8d       	ldd	r23, Y+26	; 0x1a
    153a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    153c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    153e:	20 e0       	ldi	r18, 0x00	; 0
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	40 e2       	ldi	r20, 0x20	; 32
    1544:	51 e4       	ldi	r21, 0x41	; 65
    1546:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    154a:	dc 01       	movw	r26, r24
    154c:	cb 01       	movw	r24, r22
    154e:	bc 01       	movw	r22, r24
    1550:	cd 01       	movw	r24, r26
    1552:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1556:	dc 01       	movw	r26, r24
    1558:	cb 01       	movw	r24, r22
    155a:	9c 8b       	std	Y+20, r25	; 0x14
    155c:	8b 8b       	std	Y+19, r24	; 0x13
    155e:	0f c0       	rjmp	.+30     	; 0x157e <LCD_displayCharcter+0x1c0>
    1560:	88 ec       	ldi	r24, 0xC8	; 200
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	9a 8b       	std	Y+18, r25	; 0x12
    1566:	89 8b       	std	Y+17, r24	; 0x11
    1568:	89 89       	ldd	r24, Y+17	; 0x11
    156a:	9a 89       	ldd	r25, Y+18	; 0x12
    156c:	01 97       	sbiw	r24, 0x01	; 1
    156e:	f1 f7       	brne	.-4      	; 0x156c <LCD_displayCharcter+0x1ae>
    1570:	9a 8b       	std	Y+18, r25	; 0x12
    1572:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1574:	8b 89       	ldd	r24, Y+19	; 0x13
    1576:	9c 89       	ldd	r25, Y+20	; 0x14
    1578:	01 97       	sbiw	r24, 0x01	; 1
    157a:	9c 8b       	std	Y+20, r25	; 0x14
    157c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    157e:	8b 89       	ldd	r24, Y+19	; 0x13
    1580:	9c 89       	ldd	r25, Y+20	; 0x14
    1582:	00 97       	sbiw	r24, 0x00	; 0
    1584:	69 f7       	brne	.-38     	; 0x1560 <LCD_displayCharcter+0x1a2>
    1586:	14 c0       	rjmp	.+40     	; 0x15b0 <LCD_displayCharcter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1588:	6d 89       	ldd	r22, Y+21	; 0x15
    158a:	7e 89       	ldd	r23, Y+22	; 0x16
    158c:	8f 89       	ldd	r24, Y+23	; 0x17
    158e:	98 8d       	ldd	r25, Y+24	; 0x18
    1590:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1594:	dc 01       	movw	r26, r24
    1596:	cb 01       	movw	r24, r22
    1598:	9c 8b       	std	Y+20, r25	; 0x14
    159a:	8b 8b       	std	Y+19, r24	; 0x13
    159c:	8b 89       	ldd	r24, Y+19	; 0x13
    159e:	9c 89       	ldd	r25, Y+20	; 0x14
    15a0:	98 8b       	std	Y+16, r25	; 0x10
    15a2:	8f 87       	std	Y+15, r24	; 0x0f
    15a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    15a6:	98 89       	ldd	r25, Y+16	; 0x10
    15a8:	01 97       	sbiw	r24, 0x01	; 1
    15aa:	f1 f7       	brne	.-4      	; 0x15a8 <LCD_displayCharcter+0x1ea>
    15ac:	98 8b       	std	Y+16, r25	; 0x10
    15ae:	8f 87       	std	Y+15, r24	; 0x0f
	/*delay for tpw*/
	_delay_ms(TPW_TIME);
#if (LCD_DATA_BITS_MODE == 8 )
	GPIO_writePort(PORT_LCD , Data);
    15b0:	80 e0       	ldi	r24, 0x00	; 0
    15b2:	6b a5       	ldd	r22, Y+43	; 0x2b
    15b4:	0e 94 81 13 	call	0x2702	; 0x2702 <GPIO_writePort>
	GPIO_writePin(PORT_LCD , LCD_PIN4_ID , GET_BIT(Data , 3));


#endif

	GPIO_writePin(PORT_E_enabel , PIN_E_enabel , LOGIC_LOW);
    15b8:	81 e0       	ldi	r24, 0x01	; 1
    15ba:	61 e0       	ldi	r22, 0x01	; 1
    15bc:	40 e0       	ldi	r20, 0x00	; 0
    15be:	0e 94 b7 11 	call	0x236e	; 0x236e <GPIO_writePin>
    15c2:	80 e0       	ldi	r24, 0x00	; 0
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	a0 e8       	ldi	r26, 0x80	; 128
    15c8:	bf e3       	ldi	r27, 0x3F	; 63
    15ca:	8b 87       	std	Y+11, r24	; 0x0b
    15cc:	9c 87       	std	Y+12, r25	; 0x0c
    15ce:	ad 87       	std	Y+13, r26	; 0x0d
    15d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    15d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    15d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    15d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    15da:	20 e0       	ldi	r18, 0x00	; 0
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	4a ef       	ldi	r20, 0xFA	; 250
    15e0:	54 e4       	ldi	r21, 0x44	; 68
    15e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15e6:	dc 01       	movw	r26, r24
    15e8:	cb 01       	movw	r24, r22
    15ea:	8f 83       	std	Y+7, r24	; 0x07
    15ec:	98 87       	std	Y+8, r25	; 0x08
    15ee:	a9 87       	std	Y+9, r26	; 0x09
    15f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15f2:	6f 81       	ldd	r22, Y+7	; 0x07
    15f4:	78 85       	ldd	r23, Y+8	; 0x08
    15f6:	89 85       	ldd	r24, Y+9	; 0x09
    15f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    15fa:	20 e0       	ldi	r18, 0x00	; 0
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	40 e8       	ldi	r20, 0x80	; 128
    1600:	5f e3       	ldi	r21, 0x3F	; 63
    1602:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1606:	88 23       	and	r24, r24
    1608:	2c f4       	brge	.+10     	; 0x1614 <LCD_displayCharcter+0x256>
		__ticks = 1;
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	9e 83       	std	Y+6, r25	; 0x06
    1610:	8d 83       	std	Y+5, r24	; 0x05
    1612:	3f c0       	rjmp	.+126    	; 0x1692 <LCD_displayCharcter+0x2d4>
	else if (__tmp > 65535)
    1614:	6f 81       	ldd	r22, Y+7	; 0x07
    1616:	78 85       	ldd	r23, Y+8	; 0x08
    1618:	89 85       	ldd	r24, Y+9	; 0x09
    161a:	9a 85       	ldd	r25, Y+10	; 0x0a
    161c:	20 e0       	ldi	r18, 0x00	; 0
    161e:	3f ef       	ldi	r19, 0xFF	; 255
    1620:	4f e7       	ldi	r20, 0x7F	; 127
    1622:	57 e4       	ldi	r21, 0x47	; 71
    1624:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1628:	18 16       	cp	r1, r24
    162a:	4c f5       	brge	.+82     	; 0x167e <LCD_displayCharcter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    162c:	6b 85       	ldd	r22, Y+11	; 0x0b
    162e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1630:	8d 85       	ldd	r24, Y+13	; 0x0d
    1632:	9e 85       	ldd	r25, Y+14	; 0x0e
    1634:	20 e0       	ldi	r18, 0x00	; 0
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	40 e2       	ldi	r20, 0x20	; 32
    163a:	51 e4       	ldi	r21, 0x41	; 65
    163c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1640:	dc 01       	movw	r26, r24
    1642:	cb 01       	movw	r24, r22
    1644:	bc 01       	movw	r22, r24
    1646:	cd 01       	movw	r24, r26
    1648:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    164c:	dc 01       	movw	r26, r24
    164e:	cb 01       	movw	r24, r22
    1650:	9e 83       	std	Y+6, r25	; 0x06
    1652:	8d 83       	std	Y+5, r24	; 0x05
    1654:	0f c0       	rjmp	.+30     	; 0x1674 <LCD_displayCharcter+0x2b6>
    1656:	88 ec       	ldi	r24, 0xC8	; 200
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	9c 83       	std	Y+4, r25	; 0x04
    165c:	8b 83       	std	Y+3, r24	; 0x03
    165e:	8b 81       	ldd	r24, Y+3	; 0x03
    1660:	9c 81       	ldd	r25, Y+4	; 0x04
    1662:	01 97       	sbiw	r24, 0x01	; 1
    1664:	f1 f7       	brne	.-4      	; 0x1662 <LCD_displayCharcter+0x2a4>
    1666:	9c 83       	std	Y+4, r25	; 0x04
    1668:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    166a:	8d 81       	ldd	r24, Y+5	; 0x05
    166c:	9e 81       	ldd	r25, Y+6	; 0x06
    166e:	01 97       	sbiw	r24, 0x01	; 1
    1670:	9e 83       	std	Y+6, r25	; 0x06
    1672:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1674:	8d 81       	ldd	r24, Y+5	; 0x05
    1676:	9e 81       	ldd	r25, Y+6	; 0x06
    1678:	00 97       	sbiw	r24, 0x00	; 0
    167a:	69 f7       	brne	.-38     	; 0x1656 <LCD_displayCharcter+0x298>
    167c:	14 c0       	rjmp	.+40     	; 0x16a6 <LCD_displayCharcter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    167e:	6f 81       	ldd	r22, Y+7	; 0x07
    1680:	78 85       	ldd	r23, Y+8	; 0x08
    1682:	89 85       	ldd	r24, Y+9	; 0x09
    1684:	9a 85       	ldd	r25, Y+10	; 0x0a
    1686:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    168a:	dc 01       	movw	r26, r24
    168c:	cb 01       	movw	r24, r22
    168e:	9e 83       	std	Y+6, r25	; 0x06
    1690:	8d 83       	std	Y+5, r24	; 0x05
    1692:	8d 81       	ldd	r24, Y+5	; 0x05
    1694:	9e 81       	ldd	r25, Y+6	; 0x06
    1696:	9a 83       	std	Y+2, r25	; 0x02
    1698:	89 83       	std	Y+1, r24	; 0x01
    169a:	89 81       	ldd	r24, Y+1	; 0x01
    169c:	9a 81       	ldd	r25, Y+2	; 0x02
    169e:	01 97       	sbiw	r24, 0x01	; 1
    16a0:	f1 f7       	brne	.-4      	; 0x169e <LCD_displayCharcter+0x2e0>
    16a2:	9a 83       	std	Y+2, r25	; 0x02
    16a4:	89 83       	std	Y+1, r24	; 0x01

	/*delay for th*/

	_delay_ms(TH_TIME);

}
    16a6:	ab 96       	adiw	r28, 0x2b	; 43
    16a8:	0f b6       	in	r0, 0x3f	; 63
    16aa:	f8 94       	cli
    16ac:	de bf       	out	0x3e, r29	; 62
    16ae:	0f be       	out	0x3f, r0	; 63
    16b0:	cd bf       	out	0x3d, r28	; 61
    16b2:	cf 91       	pop	r28
    16b4:	df 91       	pop	r29
    16b6:	08 95       	ret

000016b8 <LCD_init>:

void LCD_init (void)
{
    16b8:	df 93       	push	r29
    16ba:	cf 93       	push	r28
    16bc:	cd b7       	in	r28, 0x3d	; 61
    16be:	de b7       	in	r29, 0x3e	; 62
    16c0:	2e 97       	sbiw	r28, 0x0e	; 14
    16c2:	0f b6       	in	r0, 0x3f	; 63
    16c4:	f8 94       	cli
    16c6:	de bf       	out	0x3e, r29	; 62
    16c8:	0f be       	out	0x3f, r0	; 63
    16ca:	cd bf       	out	0x3d, r28	; 61


	/* RS*/
	GPIO_setupPinDirection(PORT_RS , PIN_RS , PIN_OUTPUT);
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	60 e0       	ldi	r22, 0x00	; 0
    16d0:	41 e0       	ldi	r20, 0x01	; 1
    16d2:	0e 94 cc 10 	call	0x2198	; 0x2198 <GPIO_setupPinDirection>


	/*enable PIN0_ID*/
	GPIO_setupPinDirection(PORT_E_enabel , PIN_E_enabel , PIN_OUTPUT);
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	61 e0       	ldi	r22, 0x01	; 1
    16da:	41 e0       	ldi	r20, 0x01	; 1
    16dc:	0e 94 cc 10 	call	0x2198	; 0x2198 <GPIO_setupPinDirection>

#if (LCD_DATA_BITS_MODE ==8)
	/*setup direction for port data*/
	GPIO_setupPortDirection(PORT_LCD , PORT_OUTPUT);
    16e0:	80 e0       	ldi	r24, 0x00	; 0
    16e2:	6f ef       	ldi	r22, 0xFF	; 255
    16e4:	0e 94 3d 13 	call	0x267a	; 0x267a <GPIO_setupPortDirection>
    16e8:	80 e0       	ldi	r24, 0x00	; 0
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	a0 ea       	ldi	r26, 0xA0	; 160
    16ee:	b1 e4       	ldi	r27, 0x41	; 65
    16f0:	8b 87       	std	Y+11, r24	; 0x0b
    16f2:	9c 87       	std	Y+12, r25	; 0x0c
    16f4:	ad 87       	std	Y+13, r26	; 0x0d
    16f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    16fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    16fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    16fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1700:	20 e0       	ldi	r18, 0x00	; 0
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	4a ef       	ldi	r20, 0xFA	; 250
    1706:	54 e4       	ldi	r21, 0x44	; 68
    1708:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    170c:	dc 01       	movw	r26, r24
    170e:	cb 01       	movw	r24, r22
    1710:	8f 83       	std	Y+7, r24	; 0x07
    1712:	98 87       	std	Y+8, r25	; 0x08
    1714:	a9 87       	std	Y+9, r26	; 0x09
    1716:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1718:	6f 81       	ldd	r22, Y+7	; 0x07
    171a:	78 85       	ldd	r23, Y+8	; 0x08
    171c:	89 85       	ldd	r24, Y+9	; 0x09
    171e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1720:	20 e0       	ldi	r18, 0x00	; 0
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	40 e8       	ldi	r20, 0x80	; 128
    1726:	5f e3       	ldi	r21, 0x3F	; 63
    1728:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    172c:	88 23       	and	r24, r24
    172e:	2c f4       	brge	.+10     	; 0x173a <LCD_init+0x82>
		__ticks = 1;
    1730:	81 e0       	ldi	r24, 0x01	; 1
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	9e 83       	std	Y+6, r25	; 0x06
    1736:	8d 83       	std	Y+5, r24	; 0x05
    1738:	3f c0       	rjmp	.+126    	; 0x17b8 <LCD_init+0x100>
	else if (__tmp > 65535)
    173a:	6f 81       	ldd	r22, Y+7	; 0x07
    173c:	78 85       	ldd	r23, Y+8	; 0x08
    173e:	89 85       	ldd	r24, Y+9	; 0x09
    1740:	9a 85       	ldd	r25, Y+10	; 0x0a
    1742:	20 e0       	ldi	r18, 0x00	; 0
    1744:	3f ef       	ldi	r19, 0xFF	; 255
    1746:	4f e7       	ldi	r20, 0x7F	; 127
    1748:	57 e4       	ldi	r21, 0x47	; 71
    174a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    174e:	18 16       	cp	r1, r24
    1750:	4c f5       	brge	.+82     	; 0x17a4 <LCD_init+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1752:	6b 85       	ldd	r22, Y+11	; 0x0b
    1754:	7c 85       	ldd	r23, Y+12	; 0x0c
    1756:	8d 85       	ldd	r24, Y+13	; 0x0d
    1758:	9e 85       	ldd	r25, Y+14	; 0x0e
    175a:	20 e0       	ldi	r18, 0x00	; 0
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	40 e2       	ldi	r20, 0x20	; 32
    1760:	51 e4       	ldi	r21, 0x41	; 65
    1762:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1766:	dc 01       	movw	r26, r24
    1768:	cb 01       	movw	r24, r22
    176a:	bc 01       	movw	r22, r24
    176c:	cd 01       	movw	r24, r26
    176e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1772:	dc 01       	movw	r26, r24
    1774:	cb 01       	movw	r24, r22
    1776:	9e 83       	std	Y+6, r25	; 0x06
    1778:	8d 83       	std	Y+5, r24	; 0x05
    177a:	0f c0       	rjmp	.+30     	; 0x179a <LCD_init+0xe2>
    177c:	88 ec       	ldi	r24, 0xC8	; 200
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	9c 83       	std	Y+4, r25	; 0x04
    1782:	8b 83       	std	Y+3, r24	; 0x03
    1784:	8b 81       	ldd	r24, Y+3	; 0x03
    1786:	9c 81       	ldd	r25, Y+4	; 0x04
    1788:	01 97       	sbiw	r24, 0x01	; 1
    178a:	f1 f7       	brne	.-4      	; 0x1788 <LCD_init+0xd0>
    178c:	9c 83       	std	Y+4, r25	; 0x04
    178e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1790:	8d 81       	ldd	r24, Y+5	; 0x05
    1792:	9e 81       	ldd	r25, Y+6	; 0x06
    1794:	01 97       	sbiw	r24, 0x01	; 1
    1796:	9e 83       	std	Y+6, r25	; 0x06
    1798:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    179a:	8d 81       	ldd	r24, Y+5	; 0x05
    179c:	9e 81       	ldd	r25, Y+6	; 0x06
    179e:	00 97       	sbiw	r24, 0x00	; 0
    17a0:	69 f7       	brne	.-38     	; 0x177c <LCD_init+0xc4>
    17a2:	14 c0       	rjmp	.+40     	; 0x17cc <LCD_init+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17a4:	6f 81       	ldd	r22, Y+7	; 0x07
    17a6:	78 85       	ldd	r23, Y+8	; 0x08
    17a8:	89 85       	ldd	r24, Y+9	; 0x09
    17aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    17ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17b0:	dc 01       	movw	r26, r24
    17b2:	cb 01       	movw	r24, r22
    17b4:	9e 83       	std	Y+6, r25	; 0x06
    17b6:	8d 83       	std	Y+5, r24	; 0x05
    17b8:	8d 81       	ldd	r24, Y+5	; 0x05
    17ba:	9e 81       	ldd	r25, Y+6	; 0x06
    17bc:	9a 83       	std	Y+2, r25	; 0x02
    17be:	89 83       	std	Y+1, r24	; 0x01
    17c0:	89 81       	ldd	r24, Y+1	; 0x01
    17c2:	9a 81       	ldd	r25, Y+2	; 0x02
    17c4:	01 97       	sbiw	r24, 0x01	; 1
    17c6:	f1 f7       	brne	.-4      	; 0x17c4 <LCD_init+0x10c>
    17c8:	9a 83       	std	Y+2, r25	; 0x02
    17ca:	89 83       	std	Y+1, r24	; 0x01

#endif
	_delay_ms(20);


	LCD_sendCommmand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    17cc:	88 e3       	ldi	r24, 0x38	; 56
    17ce:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <LCD_sendCommmand>
	LCD_sendCommmand(LCD_CURSOR_OFF);
    17d2:	8c e0       	ldi	r24, 0x0C	; 12
    17d4:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <LCD_sendCommmand>
	LCD_sendCommmand(LCD_CLEAR_COMMAND);
    17d8:	81 e0       	ldi	r24, 0x01	; 1
    17da:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <LCD_sendCommmand>



}
    17de:	2e 96       	adiw	r28, 0x0e	; 14
    17e0:	0f b6       	in	r0, 0x3f	; 63
    17e2:	f8 94       	cli
    17e4:	de bf       	out	0x3e, r29	; 62
    17e6:	0f be       	out	0x3f, r0	; 63
    17e8:	cd bf       	out	0x3d, r28	; 61
    17ea:	cf 91       	pop	r28
    17ec:	df 91       	pop	r29
    17ee:	08 95       	ret

000017f0 <LCD_displayString>:
void LCD_displayString(const uint8 *a_str)
{
    17f0:	df 93       	push	r29
    17f2:	cf 93       	push	r28
    17f4:	00 d0       	rcall	.+0      	; 0x17f6 <LCD_displayString+0x6>
    17f6:	0f 92       	push	r0
    17f8:	cd b7       	in	r28, 0x3d	; 61
    17fa:	de b7       	in	r29, 0x3e	; 62
    17fc:	9b 83       	std	Y+3, r25	; 0x03
    17fe:	8a 83       	std	Y+2, r24	; 0x02
	uint8 l_size;
	l_size = 0 ;
    1800:	19 82       	std	Y+1, r1	; 0x01
	for( 	l_size = 0 ;a_str[l_size] != '\0';	l_size++ )
    1802:	19 82       	std	Y+1, r1	; 0x01
    1804:	0e c0       	rjmp	.+28     	; 0x1822 <LCD_displayString+0x32>
	{
		LCD_displayCharcter(a_str[l_size]);
    1806:	89 81       	ldd	r24, Y+1	; 0x01
    1808:	28 2f       	mov	r18, r24
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	8a 81       	ldd	r24, Y+2	; 0x02
    180e:	9b 81       	ldd	r25, Y+3	; 0x03
    1810:	fc 01       	movw	r30, r24
    1812:	e2 0f       	add	r30, r18
    1814:	f3 1f       	adc	r31, r19
    1816:	80 81       	ld	r24, Z
    1818:	0e 94 df 09 	call	0x13be	; 0x13be <LCD_displayCharcter>
}
void LCD_displayString(const uint8 *a_str)
{
	uint8 l_size;
	l_size = 0 ;
	for( 	l_size = 0 ;a_str[l_size] != '\0';	l_size++ )
    181c:	89 81       	ldd	r24, Y+1	; 0x01
    181e:	8f 5f       	subi	r24, 0xFF	; 255
    1820:	89 83       	std	Y+1, r24	; 0x01
    1822:	89 81       	ldd	r24, Y+1	; 0x01
    1824:	28 2f       	mov	r18, r24
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	8a 81       	ldd	r24, Y+2	; 0x02
    182a:	9b 81       	ldd	r25, Y+3	; 0x03
    182c:	fc 01       	movw	r30, r24
    182e:	e2 0f       	add	r30, r18
    1830:	f3 1f       	adc	r31, r19
    1832:	80 81       	ld	r24, Z
    1834:	88 23       	and	r24, r24
    1836:	39 f7       	brne	.-50     	; 0x1806 <LCD_displayString+0x16>
	{
		LCD_displayCharcter(a_str[l_size]);
	}

}
    1838:	0f 90       	pop	r0
    183a:	0f 90       	pop	r0
    183c:	0f 90       	pop	r0
    183e:	cf 91       	pop	r28
    1840:	df 91       	pop	r29
    1842:	08 95       	ret

00001844 <LCD_moveCursor>:

void LCD_moveCursor(uint8 row , uint8 colum )

{
    1844:	df 93       	push	r29
    1846:	cf 93       	push	r28
    1848:	00 d0       	rcall	.+0      	; 0x184a <LCD_moveCursor+0x6>
    184a:	00 d0       	rcall	.+0      	; 0x184c <LCD_moveCursor+0x8>
    184c:	0f 92       	push	r0
    184e:	cd b7       	in	r28, 0x3d	; 61
    1850:	de b7       	in	r29, 0x3e	; 62
    1852:	8a 83       	std	Y+2, r24	; 0x02
    1854:	6b 83       	std	Y+3, r22	; 0x03
		case 3:
			l_adressCursor=colum+0x50;
				break;
	}
#elif (LCD_TYPE == 2)
	switch(row)
    1856:	8a 81       	ldd	r24, Y+2	; 0x02
    1858:	28 2f       	mov	r18, r24
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	3d 83       	std	Y+5, r19	; 0x05
    185e:	2c 83       	std	Y+4, r18	; 0x04
    1860:	8c 81       	ldd	r24, Y+4	; 0x04
    1862:	9d 81       	ldd	r25, Y+5	; 0x05
    1864:	00 97       	sbiw	r24, 0x00	; 0
    1866:	31 f0       	breq	.+12     	; 0x1874 <LCD_moveCursor+0x30>
    1868:	2c 81       	ldd	r18, Y+4	; 0x04
    186a:	3d 81       	ldd	r19, Y+5	; 0x05
    186c:	21 30       	cpi	r18, 0x01	; 1
    186e:	31 05       	cpc	r19, r1
    1870:	21 f0       	breq	.+8      	; 0x187a <LCD_moveCursor+0x36>
    1872:	06 c0       	rjmp	.+12     	; 0x1880 <LCD_moveCursor+0x3c>
	{
		case 0:
			l_adressCursor=colum;
    1874:	8b 81       	ldd	r24, Y+3	; 0x03
    1876:	89 83       	std	Y+1, r24	; 0x01
    1878:	03 c0       	rjmp	.+6      	; 0x1880 <LCD_moveCursor+0x3c>
				break;
		case 1:
			l_adressCursor=colum+0x40;
    187a:	8b 81       	ldd	r24, Y+3	; 0x03
    187c:	80 5c       	subi	r24, 0xC0	; 192
    187e:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
#endif
	LCD_sendCommmand((LCD_SET_CURSOR_LOCATION | l_adressCursor));
    1880:	89 81       	ldd	r24, Y+1	; 0x01
    1882:	80 68       	ori	r24, 0x80	; 128
    1884:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <LCD_sendCommmand>

}
    1888:	0f 90       	pop	r0
    188a:	0f 90       	pop	r0
    188c:	0f 90       	pop	r0
    188e:	0f 90       	pop	r0
    1890:	0f 90       	pop	r0
    1892:	cf 91       	pop	r28
    1894:	df 91       	pop	r29
    1896:	08 95       	ret

00001898 <LCD_displayStringRowCoulmn>:
void LCD_displayStringRowCoulmn(uint8 row , uint8 column ,const uint8  * str )
{
    1898:	df 93       	push	r29
    189a:	cf 93       	push	r28
    189c:	00 d0       	rcall	.+0      	; 0x189e <LCD_displayStringRowCoulmn+0x6>
    189e:	00 d0       	rcall	.+0      	; 0x18a0 <LCD_displayStringRowCoulmn+0x8>
    18a0:	cd b7       	in	r28, 0x3d	; 61
    18a2:	de b7       	in	r29, 0x3e	; 62
    18a4:	89 83       	std	Y+1, r24	; 0x01
    18a6:	6a 83       	std	Y+2, r22	; 0x02
    18a8:	5c 83       	std	Y+4, r21	; 0x04
    18aa:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row ,column);
    18ac:	89 81       	ldd	r24, Y+1	; 0x01
    18ae:	6a 81       	ldd	r22, Y+2	; 0x02
    18b0:	0e 94 22 0c 	call	0x1844	; 0x1844 <LCD_moveCursor>
	LCD_displayString(str);
    18b4:	8b 81       	ldd	r24, Y+3	; 0x03
    18b6:	9c 81       	ldd	r25, Y+4	; 0x04
    18b8:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_displayString>
}
    18bc:	0f 90       	pop	r0
    18be:	0f 90       	pop	r0
    18c0:	0f 90       	pop	r0
    18c2:	0f 90       	pop	r0
    18c4:	cf 91       	pop	r28
    18c6:	df 91       	pop	r29
    18c8:	08 95       	ret

000018ca <LCD_clearScreen>:


void LCD_clearScreen()
{
    18ca:	df 93       	push	r29
    18cc:	cf 93       	push	r28
    18ce:	cd b7       	in	r28, 0x3d	; 61
    18d0:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommmand(LCD_CLEAR_COMMAND);
    18d2:	81 e0       	ldi	r24, 0x01	; 1
    18d4:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <LCD_sendCommmand>
}
    18d8:	cf 91       	pop	r28
    18da:	df 91       	pop	r29
    18dc:	08 95       	ret

000018de <LCD_intgerToString>:

void LCD_intgerToString(uint32 num)
{
    18de:	0f 93       	push	r16
    18e0:	1f 93       	push	r17
    18e2:	df 93       	push	r29
    18e4:	cf 93       	push	r28
    18e6:	cd b7       	in	r28, 0x3d	; 61
    18e8:	de b7       	in	r29, 0x3e	; 62
    18ea:	67 97       	sbiw	r28, 0x17	; 23
    18ec:	0f b6       	in	r0, 0x3f	; 63
    18ee:	f8 94       	cli
    18f0:	de bf       	out	0x3e, r29	; 62
    18f2:	0f be       	out	0x3f, r0	; 63
    18f4:	cd bf       	out	0x3d, r28	; 61
    18f6:	6c 8b       	std	Y+20, r22	; 0x14
    18f8:	7d 8b       	std	Y+21, r23	; 0x15
    18fa:	8e 8b       	std	Y+22, r24	; 0x16
    18fc:	9f 8b       	std	Y+23, r25	; 0x17
	uint8 i=0;
    18fe:	1b 82       	std	Y+3, r1	; 0x03
	uint8 size = 0;
    1900:	1a 82       	std	Y+2, r1	; 0x02
	uint8 intTostr[16];
	uint8 temp ;


	for (i = 0 ; num != 0 ; i++)
    1902:	1b 82       	std	Y+3, r1	; 0x03
    1904:	2e c0       	rjmp	.+92     	; 0x1962 <LCD_intgerToString+0x84>
	{
		intTostr[i] = (num%10)+ 48;
    1906:	8b 81       	ldd	r24, Y+3	; 0x03
    1908:	08 2f       	mov	r16, r24
    190a:	10 e0       	ldi	r17, 0x00	; 0
    190c:	8c 89       	ldd	r24, Y+20	; 0x14
    190e:	9d 89       	ldd	r25, Y+21	; 0x15
    1910:	ae 89       	ldd	r26, Y+22	; 0x16
    1912:	bf 89       	ldd	r27, Y+23	; 0x17
    1914:	2a e0       	ldi	r18, 0x0A	; 10
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	40 e0       	ldi	r20, 0x00	; 0
    191a:	50 e0       	ldi	r21, 0x00	; 0
    191c:	bc 01       	movw	r22, r24
    191e:	cd 01       	movw	r24, r26
    1920:	0e 94 1e 14 	call	0x283c	; 0x283c <__udivmodsi4>
    1924:	dc 01       	movw	r26, r24
    1926:	cb 01       	movw	r24, r22
    1928:	28 2f       	mov	r18, r24
    192a:	20 5d       	subi	r18, 0xD0	; 208
    192c:	ce 01       	movw	r24, r28
    192e:	04 96       	adiw	r24, 0x04	; 4
    1930:	fc 01       	movw	r30, r24
    1932:	e0 0f       	add	r30, r16
    1934:	f1 1f       	adc	r31, r17
    1936:	20 83       	st	Z, r18
		num/=10;
    1938:	8c 89       	ldd	r24, Y+20	; 0x14
    193a:	9d 89       	ldd	r25, Y+21	; 0x15
    193c:	ae 89       	ldd	r26, Y+22	; 0x16
    193e:	bf 89       	ldd	r27, Y+23	; 0x17
    1940:	2a e0       	ldi	r18, 0x0A	; 10
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	40 e0       	ldi	r20, 0x00	; 0
    1946:	50 e0       	ldi	r21, 0x00	; 0
    1948:	bc 01       	movw	r22, r24
    194a:	cd 01       	movw	r24, r26
    194c:	0e 94 1e 14 	call	0x283c	; 0x283c <__udivmodsi4>
    1950:	da 01       	movw	r26, r20
    1952:	c9 01       	movw	r24, r18
    1954:	8c 8b       	std	Y+20, r24	; 0x14
    1956:	9d 8b       	std	Y+21, r25	; 0x15
    1958:	ae 8b       	std	Y+22, r26	; 0x16
    195a:	bf 8b       	std	Y+23, r27	; 0x17
	uint8 size = 0;
	uint8 intTostr[16];
	uint8 temp ;


	for (i = 0 ; num != 0 ; i++)
    195c:	8b 81       	ldd	r24, Y+3	; 0x03
    195e:	8f 5f       	subi	r24, 0xFF	; 255
    1960:	8b 83       	std	Y+3, r24	; 0x03
    1962:	8c 89       	ldd	r24, Y+20	; 0x14
    1964:	9d 89       	ldd	r25, Y+21	; 0x15
    1966:	ae 89       	ldd	r26, Y+22	; 0x16
    1968:	bf 89       	ldd	r27, Y+23	; 0x17
    196a:	00 97       	sbiw	r24, 0x00	; 0
    196c:	a1 05       	cpc	r26, r1
    196e:	b1 05       	cpc	r27, r1
    1970:	51 f6       	brne	.-108    	; 0x1906 <LCD_intgerToString+0x28>
	{
		intTostr[i] = (num%10)+ 48;
		num/=10;
	}
	size = i;
    1972:	8b 81       	ldd	r24, Y+3	; 0x03
    1974:	8a 83       	std	Y+2, r24	; 0x02

	for(i = 0 ; i < (size /2) ; i ++)
    1976:	1b 82       	std	Y+3, r1	; 0x03
    1978:	3d c0       	rjmp	.+122    	; 0x19f4 <LCD_intgerToString+0x116>
	{
		temp = intTostr[i];
    197a:	8b 81       	ldd	r24, Y+3	; 0x03
    197c:	28 2f       	mov	r18, r24
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	ce 01       	movw	r24, r28
    1982:	04 96       	adiw	r24, 0x04	; 4
    1984:	fc 01       	movw	r30, r24
    1986:	e2 0f       	add	r30, r18
    1988:	f3 1f       	adc	r31, r19
    198a:	80 81       	ld	r24, Z
    198c:	89 83       	std	Y+1, r24	; 0x01
		intTostr[i] = intTostr[(size-i-1)];
    198e:	8b 81       	ldd	r24, Y+3	; 0x03
    1990:	48 2f       	mov	r20, r24
    1992:	50 e0       	ldi	r21, 0x00	; 0
    1994:	8a 81       	ldd	r24, Y+2	; 0x02
    1996:	28 2f       	mov	r18, r24
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	8b 81       	ldd	r24, Y+3	; 0x03
    199c:	88 2f       	mov	r24, r24
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	b9 01       	movw	r22, r18
    19a2:	68 1b       	sub	r22, r24
    19a4:	79 0b       	sbc	r23, r25
    19a6:	cb 01       	movw	r24, r22
    19a8:	9c 01       	movw	r18, r24
    19aa:	21 50       	subi	r18, 0x01	; 1
    19ac:	30 40       	sbci	r19, 0x00	; 0
    19ae:	ce 01       	movw	r24, r28
    19b0:	04 96       	adiw	r24, 0x04	; 4
    19b2:	fc 01       	movw	r30, r24
    19b4:	e2 0f       	add	r30, r18
    19b6:	f3 1f       	adc	r31, r19
    19b8:	20 81       	ld	r18, Z
    19ba:	ce 01       	movw	r24, r28
    19bc:	04 96       	adiw	r24, 0x04	; 4
    19be:	fc 01       	movw	r30, r24
    19c0:	e4 0f       	add	r30, r20
    19c2:	f5 1f       	adc	r31, r21
    19c4:	20 83       	st	Z, r18
		intTostr[(size-i-1)] = temp;
    19c6:	8a 81       	ldd	r24, Y+2	; 0x02
    19c8:	28 2f       	mov	r18, r24
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	8b 81       	ldd	r24, Y+3	; 0x03
    19ce:	88 2f       	mov	r24, r24
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	a9 01       	movw	r20, r18
    19d4:	48 1b       	sub	r20, r24
    19d6:	59 0b       	sbc	r21, r25
    19d8:	ca 01       	movw	r24, r20
    19da:	9c 01       	movw	r18, r24
    19dc:	21 50       	subi	r18, 0x01	; 1
    19de:	30 40       	sbci	r19, 0x00	; 0
    19e0:	ce 01       	movw	r24, r28
    19e2:	04 96       	adiw	r24, 0x04	; 4
    19e4:	fc 01       	movw	r30, r24
    19e6:	e2 0f       	add	r30, r18
    19e8:	f3 1f       	adc	r31, r19
    19ea:	89 81       	ldd	r24, Y+1	; 0x01
    19ec:	80 83       	st	Z, r24
		intTostr[i] = (num%10)+ 48;
		num/=10;
	}
	size = i;

	for(i = 0 ; i < (size /2) ; i ++)
    19ee:	8b 81       	ldd	r24, Y+3	; 0x03
    19f0:	8f 5f       	subi	r24, 0xFF	; 255
    19f2:	8b 83       	std	Y+3, r24	; 0x03
    19f4:	8a 81       	ldd	r24, Y+2	; 0x02
    19f6:	98 2f       	mov	r25, r24
    19f8:	96 95       	lsr	r25
    19fa:	8b 81       	ldd	r24, Y+3	; 0x03
    19fc:	89 17       	cp	r24, r25
    19fe:	08 f4       	brcc	.+2      	; 0x1a02 <LCD_intgerToString+0x124>
    1a00:	bc cf       	rjmp	.-136    	; 0x197a <LCD_intgerToString+0x9c>
		temp = intTostr[i];
		intTostr[i] = intTostr[(size-i-1)];
		intTostr[(size-i-1)] = temp;
	}

	intTostr[size] = '\0';
    1a02:	8a 81       	ldd	r24, Y+2	; 0x02
    1a04:	28 2f       	mov	r18, r24
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	ce 01       	movw	r24, r28
    1a0a:	04 96       	adiw	r24, 0x04	; 4
    1a0c:	fc 01       	movw	r30, r24
    1a0e:	e2 0f       	add	r30, r18
    1a10:	f3 1f       	adc	r31, r19
    1a12:	10 82       	st	Z, r1
	LCD_displayString(intTostr);
    1a14:	ce 01       	movw	r24, r28
    1a16:	04 96       	adiw	r24, 0x04	; 4
    1a18:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_displayString>
	  char buff[16];
	   itoa(num,buff,10);
	   LCD_displayString(buff);

*/
}
    1a1c:	67 96       	adiw	r28, 0x17	; 23
    1a1e:	0f b6       	in	r0, 0x3f	; 63
    1a20:	f8 94       	cli
    1a22:	de bf       	out	0x3e, r29	; 62
    1a24:	0f be       	out	0x3f, r0	; 63
    1a26:	cd bf       	out	0x3d, r28	; 61
    1a28:	cf 91       	pop	r28
    1a2a:	df 91       	pop	r29
    1a2c:	1f 91       	pop	r17
    1a2e:	0f 91       	pop	r16
    1a30:	08 95       	ret

00001a32 <set_servo_angle>:
#include "LCD.h"
#include <util/delay.h>


void set_servo_angle(uint16 angle)
{
    1a32:	df 93       	push	r29
    1a34:	cf 93       	push	r28
    1a36:	00 d0       	rcall	.+0      	; 0x1a38 <set_servo_angle+0x6>
    1a38:	cd b7       	in	r28, 0x3d	; 61
    1a3a:	de b7       	in	r29, 0x3e	; 62
    1a3c:	9a 83       	std	Y+2, r25	; 0x02
    1a3e:	89 83       	std	Y+1, r24	; 0x01
    // Set the PWM pin as output
    GPIO_setupPinDirection(PORT_ID_PMW, PIN_ID_PMW, PIN_OUTPUT);
    1a40:	83 e0       	ldi	r24, 0x03	; 3
    1a42:	65 e0       	ldi	r22, 0x05	; 5
    1a44:	41 e0       	ldi	r20, 0x01	; 1
    1a46:	0e 94 cc 10 	call	0x2198	; 0x2198 <GPIO_setupPinDirection>

    // Reset Timer 1 counter
    TCNT1 = 0;
    1a4a:	ec e4       	ldi	r30, 0x4C	; 76
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	11 82       	std	Z+1, r1	; 0x01
    1a50:	10 82       	st	Z, r1

    // Set the PWM duty cycle
    OCR1A = angle;
    1a52:	ea e4       	ldi	r30, 0x4A	; 74
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	89 81       	ldd	r24, Y+1	; 0x01
    1a58:	9a 81       	ldd	r25, Y+2	; 0x02
    1a5a:	91 83       	std	Z+1, r25	; 0x01
    1a5c:	80 83       	st	Z, r24

    // Configure Timer 1 for Fast PWM mode (ICR1 as TOP), non-inverting mode, and prescaler of 8
    TCCR1A = (1 << WGM11) | (1 << COM1A1);
    1a5e:	ef e4       	ldi	r30, 0x4F	; 79
    1a60:	f0 e0       	ldi	r31, 0x00	; 0
    1a62:	82 e8       	ldi	r24, 0x82	; 130
    1a64:	80 83       	st	Z, r24
    TCCR1B = (1 << WGM12) | (1 << WGM13) | (1 << CS11);
    1a66:	ee e4       	ldi	r30, 0x4E	; 78
    1a68:	f0 e0       	ldi	r31, 0x00	; 0
    1a6a:	8a e1       	ldi	r24, 0x1A	; 26
    1a6c:	80 83       	st	Z, r24

    // Set the TOP value for Timer 1 to configure the PWM frequency (20 ms period)
    ICR1 = 19999; // For 8 MHz clock and prescaler of 8
    1a6e:	e6 e4       	ldi	r30, 0x46	; 70
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	8f e1       	ldi	r24, 0x1F	; 31
    1a74:	9e e4       	ldi	r25, 0x4E	; 78
    1a76:	91 83       	std	Z+1, r25	; 0x01
    1a78:	80 83       	st	Z, r24
}
    1a7a:	0f 90       	pop	r0
    1a7c:	0f 90       	pop	r0
    1a7e:	cf 91       	pop	r28
    1a80:	df 91       	pop	r29
    1a82:	08 95       	ret

00001a84 <init_motor_driver>:




// Initialize motor driver
void init_motor_driver() {
    1a84:	df 93       	push	r29
    1a86:	cf 93       	push	r28
    1a88:	cd b7       	in	r28, 0x3d	; 61
    1a8a:	de b7       	in	r29, 0x3e	; 62
	DDRC |= (1 << IN1) | (1 << IN2) | (1 << IN3) | (1 << IN4);  // Set motor driver pins as outputs
    1a8c:	a4 e3       	ldi	r26, 0x34	; 52
    1a8e:	b0 e0       	ldi	r27, 0x00	; 0
    1a90:	e4 e3       	ldi	r30, 0x34	; 52
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	80 81       	ld	r24, Z
    1a96:	8f 60       	ori	r24, 0x0F	; 15
    1a98:	8c 93       	st	X, r24
}
    1a9a:	cf 91       	pop	r28
    1a9c:	df 91       	pop	r29
    1a9e:	08 95       	ret

00001aa0 <move_forward>:

// Motor control functions
void move_forward() {
    1aa0:	df 93       	push	r29
    1aa2:	cf 93       	push	r28
    1aa4:	cd b7       	in	r28, 0x3d	; 61
    1aa6:	de b7       	in	r29, 0x3e	; 62
	PORTC |= (1 << IN1);
    1aa8:	a5 e3       	ldi	r26, 0x35	; 53
    1aaa:	b0 e0       	ldi	r27, 0x00	; 0
    1aac:	e5 e3       	ldi	r30, 0x35	; 53
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	80 81       	ld	r24, Z
    1ab2:	81 60       	ori	r24, 0x01	; 1
    1ab4:	8c 93       	st	X, r24
	PORTC &= ~(1 << IN2);
    1ab6:	a5 e3       	ldi	r26, 0x35	; 53
    1ab8:	b0 e0       	ldi	r27, 0x00	; 0
    1aba:	e5 e3       	ldi	r30, 0x35	; 53
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	80 81       	ld	r24, Z
    1ac0:	8d 7f       	andi	r24, 0xFD	; 253
    1ac2:	8c 93       	st	X, r24
	PORTC |= (1 << IN3);
    1ac4:	a5 e3       	ldi	r26, 0x35	; 53
    1ac6:	b0 e0       	ldi	r27, 0x00	; 0
    1ac8:	e5 e3       	ldi	r30, 0x35	; 53
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	80 81       	ld	r24, Z
    1ace:	84 60       	ori	r24, 0x04	; 4
    1ad0:	8c 93       	st	X, r24
	PORTC &= ~(1 << IN4);
    1ad2:	a5 e3       	ldi	r26, 0x35	; 53
    1ad4:	b0 e0       	ldi	r27, 0x00	; 0
    1ad6:	e5 e3       	ldi	r30, 0x35	; 53
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	80 81       	ld	r24, Z
    1adc:	87 7f       	andi	r24, 0xF7	; 247
    1ade:	8c 93       	st	X, r24
}
    1ae0:	cf 91       	pop	r28
    1ae2:	df 91       	pop	r29
    1ae4:	08 95       	ret

00001ae6 <move_backward>:

void move_backward() {
    1ae6:	df 93       	push	r29
    1ae8:	cf 93       	push	r28
    1aea:	cd b7       	in	r28, 0x3d	; 61
    1aec:	de b7       	in	r29, 0x3e	; 62
	PORTC &= ~(1 << IN1);
    1aee:	a5 e3       	ldi	r26, 0x35	; 53
    1af0:	b0 e0       	ldi	r27, 0x00	; 0
    1af2:	e5 e3       	ldi	r30, 0x35	; 53
    1af4:	f0 e0       	ldi	r31, 0x00	; 0
    1af6:	80 81       	ld	r24, Z
    1af8:	8e 7f       	andi	r24, 0xFE	; 254
    1afa:	8c 93       	st	X, r24
	PORTC |= (1 << IN2);
    1afc:	a5 e3       	ldi	r26, 0x35	; 53
    1afe:	b0 e0       	ldi	r27, 0x00	; 0
    1b00:	e5 e3       	ldi	r30, 0x35	; 53
    1b02:	f0 e0       	ldi	r31, 0x00	; 0
    1b04:	80 81       	ld	r24, Z
    1b06:	82 60       	ori	r24, 0x02	; 2
    1b08:	8c 93       	st	X, r24
	PORTC &= ~(1 << IN3);
    1b0a:	a5 e3       	ldi	r26, 0x35	; 53
    1b0c:	b0 e0       	ldi	r27, 0x00	; 0
    1b0e:	e5 e3       	ldi	r30, 0x35	; 53
    1b10:	f0 e0       	ldi	r31, 0x00	; 0
    1b12:	80 81       	ld	r24, Z
    1b14:	8b 7f       	andi	r24, 0xFB	; 251
    1b16:	8c 93       	st	X, r24
	PORTC |= (1 << IN4);
    1b18:	a5 e3       	ldi	r26, 0x35	; 53
    1b1a:	b0 e0       	ldi	r27, 0x00	; 0
    1b1c:	e5 e3       	ldi	r30, 0x35	; 53
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	80 81       	ld	r24, Z
    1b22:	88 60       	ori	r24, 0x08	; 8
    1b24:	8c 93       	st	X, r24
}
    1b26:	cf 91       	pop	r28
    1b28:	df 91       	pop	r29
    1b2a:	08 95       	ret

00001b2c <turn_left>:

void turn_left() {
    1b2c:	df 93       	push	r29
    1b2e:	cf 93       	push	r28
    1b30:	cd b7       	in	r28, 0x3d	; 61
    1b32:	de b7       	in	r29, 0x3e	; 62
	PORTC &= ~(1 << IN1);
    1b34:	a5 e3       	ldi	r26, 0x35	; 53
    1b36:	b0 e0       	ldi	r27, 0x00	; 0
    1b38:	e5 e3       	ldi	r30, 0x35	; 53
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	80 81       	ld	r24, Z
    1b3e:	8e 7f       	andi	r24, 0xFE	; 254
    1b40:	8c 93       	st	X, r24
	PORTC &= ~(1 << IN2);
    1b42:	a5 e3       	ldi	r26, 0x35	; 53
    1b44:	b0 e0       	ldi	r27, 0x00	; 0
    1b46:	e5 e3       	ldi	r30, 0x35	; 53
    1b48:	f0 e0       	ldi	r31, 0x00	; 0
    1b4a:	80 81       	ld	r24, Z
    1b4c:	8d 7f       	andi	r24, 0xFD	; 253
    1b4e:	8c 93       	st	X, r24
	PORTC |= (1 << IN3);
    1b50:	a5 e3       	ldi	r26, 0x35	; 53
    1b52:	b0 e0       	ldi	r27, 0x00	; 0
    1b54:	e5 e3       	ldi	r30, 0x35	; 53
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	80 81       	ld	r24, Z
    1b5a:	84 60       	ori	r24, 0x04	; 4
    1b5c:	8c 93       	st	X, r24
	PORTC &= ~(1 << IN4);
    1b5e:	a5 e3       	ldi	r26, 0x35	; 53
    1b60:	b0 e0       	ldi	r27, 0x00	; 0
    1b62:	e5 e3       	ldi	r30, 0x35	; 53
    1b64:	f0 e0       	ldi	r31, 0x00	; 0
    1b66:	80 81       	ld	r24, Z
    1b68:	87 7f       	andi	r24, 0xF7	; 247
    1b6a:	8c 93       	st	X, r24
}
    1b6c:	cf 91       	pop	r28
    1b6e:	df 91       	pop	r29
    1b70:	08 95       	ret

00001b72 <turn_right>:

void turn_right() {
    1b72:	df 93       	push	r29
    1b74:	cf 93       	push	r28
    1b76:	cd b7       	in	r28, 0x3d	; 61
    1b78:	de b7       	in	r29, 0x3e	; 62
	PORTC |= (1 << IN1);
    1b7a:	a5 e3       	ldi	r26, 0x35	; 53
    1b7c:	b0 e0       	ldi	r27, 0x00	; 0
    1b7e:	e5 e3       	ldi	r30, 0x35	; 53
    1b80:	f0 e0       	ldi	r31, 0x00	; 0
    1b82:	80 81       	ld	r24, Z
    1b84:	81 60       	ori	r24, 0x01	; 1
    1b86:	8c 93       	st	X, r24
	PORTC &= ~(1 << IN2);
    1b88:	a5 e3       	ldi	r26, 0x35	; 53
    1b8a:	b0 e0       	ldi	r27, 0x00	; 0
    1b8c:	e5 e3       	ldi	r30, 0x35	; 53
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	80 81       	ld	r24, Z
    1b92:	8d 7f       	andi	r24, 0xFD	; 253
    1b94:	8c 93       	st	X, r24
	PORTC &= ~(1 << IN3);
    1b96:	a5 e3       	ldi	r26, 0x35	; 53
    1b98:	b0 e0       	ldi	r27, 0x00	; 0
    1b9a:	e5 e3       	ldi	r30, 0x35	; 53
    1b9c:	f0 e0       	ldi	r31, 0x00	; 0
    1b9e:	80 81       	ld	r24, Z
    1ba0:	8b 7f       	andi	r24, 0xFB	; 251
    1ba2:	8c 93       	st	X, r24
	PORTC &= ~(1 << IN4);
    1ba4:	a5 e3       	ldi	r26, 0x35	; 53
    1ba6:	b0 e0       	ldi	r27, 0x00	; 0
    1ba8:	e5 e3       	ldi	r30, 0x35	; 53
    1baa:	f0 e0       	ldi	r31, 0x00	; 0
    1bac:	80 81       	ld	r24, Z
    1bae:	87 7f       	andi	r24, 0xF7	; 247
    1bb0:	8c 93       	st	X, r24
}
    1bb2:	cf 91       	pop	r28
    1bb4:	df 91       	pop	r29
    1bb6:	08 95       	ret

00001bb8 <stop_car>:

void stop_car() {
    1bb8:	df 93       	push	r29
    1bba:	cf 93       	push	r28
    1bbc:	cd b7       	in	r28, 0x3d	; 61
    1bbe:	de b7       	in	r29, 0x3e	; 62
	PORTC &= ~(1 << IN1);
    1bc0:	a5 e3       	ldi	r26, 0x35	; 53
    1bc2:	b0 e0       	ldi	r27, 0x00	; 0
    1bc4:	e5 e3       	ldi	r30, 0x35	; 53
    1bc6:	f0 e0       	ldi	r31, 0x00	; 0
    1bc8:	80 81       	ld	r24, Z
    1bca:	8e 7f       	andi	r24, 0xFE	; 254
    1bcc:	8c 93       	st	X, r24
	PORTC &= ~(1 << IN2);
    1bce:	a5 e3       	ldi	r26, 0x35	; 53
    1bd0:	b0 e0       	ldi	r27, 0x00	; 0
    1bd2:	e5 e3       	ldi	r30, 0x35	; 53
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	80 81       	ld	r24, Z
    1bd8:	8d 7f       	andi	r24, 0xFD	; 253
    1bda:	8c 93       	st	X, r24
	PORTC &= ~(1 << IN3);
    1bdc:	a5 e3       	ldi	r26, 0x35	; 53
    1bde:	b0 e0       	ldi	r27, 0x00	; 0
    1be0:	e5 e3       	ldi	r30, 0x35	; 53
    1be2:	f0 e0       	ldi	r31, 0x00	; 0
    1be4:	80 81       	ld	r24, Z
    1be6:	8b 7f       	andi	r24, 0xFB	; 251
    1be8:	8c 93       	st	X, r24
	PORTC &= ~(1 << IN4);
    1bea:	a5 e3       	ldi	r26, 0x35	; 53
    1bec:	b0 e0       	ldi	r27, 0x00	; 0
    1bee:	e5 e3       	ldi	r30, 0x35	; 53
    1bf0:	f0 e0       	ldi	r31, 0x00	; 0
    1bf2:	80 81       	ld	r24, Z
    1bf4:	87 7f       	andi	r24, 0xF7	; 247
    1bf6:	8c 93       	st	X, r24
}
    1bf8:	cf 91       	pop	r28
    1bfa:	df 91       	pop	r29
    1bfc:	08 95       	ret

00001bfe <main>:
/*************Global values **********************/
uint16_t left_distance;
uint16_t right_distance;
uint16_t distance = 0;

int main() {
    1bfe:	0f 93       	push	r16
    1c00:	1f 93       	push	r17
    1c02:	df 93       	push	r29
    1c04:	cf 93       	push	r28
    1c06:	cd b7       	in	r28, 0x3d	; 61
    1c08:	de b7       	in	r29, 0x3e	; 62
    1c0a:	c6 54       	subi	r28, 0x46	; 70
    1c0c:	d0 40       	sbci	r29, 0x00	; 0
    1c0e:	0f b6       	in	r0, 0x3f	; 63
    1c10:	f8 94       	cli
    1c12:	de bf       	out	0x3e, r29	; 62
    1c14:	0f be       	out	0x3f, r0	; 63
    1c16:	cd bf       	out	0x3d, r28	; 61

	SREG = (1<<7);
    1c18:	ef e5       	ldi	r30, 0x5F	; 95
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	80 e8       	ldi	r24, 0x80	; 128
    1c1e:	80 83       	st	Z, r24
	init_motor_driver();
    1c20:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <init_motor_driver>
	Ultrasonic_init();
    1c24:	0e 94 4f 06 	call	0xc9e	; 0xc9e <Ultrasonic_init>
	LCD_init();
    1c28:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <LCD_init>

	set_servo_angle(1500);  // Center the servo initially
    1c2c:	8c ed       	ldi	r24, 0xDC	; 220
    1c2e:	95 e0       	ldi	r25, 0x05	; 5
    1c30:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <set_servo_angle>

	LCD_clearScreen();
    1c34:	0e 94 65 0c 	call	0x18ca	; 0x18ca <LCD_clearScreen>
	while (1) {

		distance = Ultrasonic_readDistance();
    1c38:	0e 94 5f 07 	call	0xebe	; 0xebe <Ultrasonic_readDistance>
    1c3c:	90 93 a9 00 	sts	0x00A9, r25
    1c40:	80 93 a8 00 	sts	0x00A8, r24
		move_forward();
    1c44:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <move_forward>


		set_servo_angle(1500);
    1c48:	8c ed       	ldi	r24, 0xDC	; 220
    1c4a:	95 e0       	ldi	r25, 0x05	; 5
    1c4c:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <set_servo_angle>

		if (distance < 15) {  // Obstacle detected
    1c50:	80 91 a8 00 	lds	r24, 0x00A8
    1c54:	90 91 a9 00 	lds	r25, 0x00A9
    1c58:	8f 30       	cpi	r24, 0x0F	; 15
    1c5a:	91 05       	cpc	r25, r1
    1c5c:	08 f0       	brcs	.+2      	; 0x1c60 <main+0x62>
    1c5e:	99 c2       	rjmp	.+1330   	; 0x2192 <main+0x594>
			stop_car();
    1c60:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <stop_car>
			LCD_clearScreen();
    1c64:	0e 94 65 0c 	call	0x18ca	; 0x18ca <LCD_clearScreen>
			LCD_displayString("car is stoped");
    1c68:	80 e6       	ldi	r24, 0x60	; 96
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_displayString>
    1c70:	fe 01       	movw	r30, r28
    1c72:	ed 5b       	subi	r30, 0xBD	; 189
    1c74:	ff 4f       	sbci	r31, 0xFF	; 255
    1c76:	80 e0       	ldi	r24, 0x00	; 0
    1c78:	90 e8       	ldi	r25, 0x80	; 128
    1c7a:	ab eb       	ldi	r26, 0xBB	; 187
    1c7c:	b4 e4       	ldi	r27, 0x44	; 68
    1c7e:	80 83       	st	Z, r24
    1c80:	91 83       	std	Z+1, r25	; 0x01
    1c82:	a2 83       	std	Z+2, r26	; 0x02
    1c84:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c86:	8e 01       	movw	r16, r28
    1c88:	01 5c       	subi	r16, 0xC1	; 193
    1c8a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c8c:	fe 01       	movw	r30, r28
    1c8e:	ed 5b       	subi	r30, 0xBD	; 189
    1c90:	ff 4f       	sbci	r31, 0xFF	; 255
    1c92:	60 81       	ld	r22, Z
    1c94:	71 81       	ldd	r23, Z+1	; 0x01
    1c96:	82 81       	ldd	r24, Z+2	; 0x02
    1c98:	93 81       	ldd	r25, Z+3	; 0x03
    1c9a:	20 e0       	ldi	r18, 0x00	; 0
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	4a ef       	ldi	r20, 0xFA	; 250
    1ca0:	54 e4       	ldi	r21, 0x44	; 68
    1ca2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ca6:	dc 01       	movw	r26, r24
    1ca8:	cb 01       	movw	r24, r22
    1caa:	f8 01       	movw	r30, r16
    1cac:	80 83       	st	Z, r24
    1cae:	91 83       	std	Z+1, r25	; 0x01
    1cb0:	a2 83       	std	Z+2, r26	; 0x02
    1cb2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1cb4:	fe 01       	movw	r30, r28
    1cb6:	ff 96       	adiw	r30, 0x3f	; 63
    1cb8:	60 81       	ld	r22, Z
    1cba:	71 81       	ldd	r23, Z+1	; 0x01
    1cbc:	82 81       	ldd	r24, Z+2	; 0x02
    1cbe:	93 81       	ldd	r25, Z+3	; 0x03
    1cc0:	20 e0       	ldi	r18, 0x00	; 0
    1cc2:	30 e0       	ldi	r19, 0x00	; 0
    1cc4:	40 e8       	ldi	r20, 0x80	; 128
    1cc6:	5f e3       	ldi	r21, 0x3F	; 63
    1cc8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ccc:	88 23       	and	r24, r24
    1cce:	2c f4       	brge	.+10     	; 0x1cda <main+0xdc>
		__ticks = 1;
    1cd0:	81 e0       	ldi	r24, 0x01	; 1
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	9e af       	std	Y+62, r25	; 0x3e
    1cd6:	8d af       	std	Y+61, r24	; 0x3d
    1cd8:	46 c0       	rjmp	.+140    	; 0x1d66 <main+0x168>
	else if (__tmp > 65535)
    1cda:	fe 01       	movw	r30, r28
    1cdc:	ff 96       	adiw	r30, 0x3f	; 63
    1cde:	60 81       	ld	r22, Z
    1ce0:	71 81       	ldd	r23, Z+1	; 0x01
    1ce2:	82 81       	ldd	r24, Z+2	; 0x02
    1ce4:	93 81       	ldd	r25, Z+3	; 0x03
    1ce6:	20 e0       	ldi	r18, 0x00	; 0
    1ce8:	3f ef       	ldi	r19, 0xFF	; 255
    1cea:	4f e7       	ldi	r20, 0x7F	; 127
    1cec:	57 e4       	ldi	r21, 0x47	; 71
    1cee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cf2:	18 16       	cp	r1, r24
    1cf4:	64 f5       	brge	.+88     	; 0x1d4e <main+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cf6:	fe 01       	movw	r30, r28
    1cf8:	ed 5b       	subi	r30, 0xBD	; 189
    1cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfc:	60 81       	ld	r22, Z
    1cfe:	71 81       	ldd	r23, Z+1	; 0x01
    1d00:	82 81       	ldd	r24, Z+2	; 0x02
    1d02:	93 81       	ldd	r25, Z+3	; 0x03
    1d04:	20 e0       	ldi	r18, 0x00	; 0
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	40 e2       	ldi	r20, 0x20	; 32
    1d0a:	51 e4       	ldi	r21, 0x41	; 65
    1d0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d10:	dc 01       	movw	r26, r24
    1d12:	cb 01       	movw	r24, r22
    1d14:	bc 01       	movw	r22, r24
    1d16:	cd 01       	movw	r24, r26
    1d18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d1c:	dc 01       	movw	r26, r24
    1d1e:	cb 01       	movw	r24, r22
    1d20:	9e af       	std	Y+62, r25	; 0x3e
    1d22:	8d af       	std	Y+61, r24	; 0x3d
    1d24:	0f c0       	rjmp	.+30     	; 0x1d44 <main+0x146>
    1d26:	88 ec       	ldi	r24, 0xC8	; 200
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	9c af       	std	Y+60, r25	; 0x3c
    1d2c:	8b af       	std	Y+59, r24	; 0x3b
    1d2e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1d30:	9c ad       	ldd	r25, Y+60	; 0x3c
    1d32:	01 97       	sbiw	r24, 0x01	; 1
    1d34:	f1 f7       	brne	.-4      	; 0x1d32 <main+0x134>
    1d36:	9c af       	std	Y+60, r25	; 0x3c
    1d38:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d3a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d3c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d3e:	01 97       	sbiw	r24, 0x01	; 1
    1d40:	9e af       	std	Y+62, r25	; 0x3e
    1d42:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d44:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d46:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d48:	00 97       	sbiw	r24, 0x00	; 0
    1d4a:	69 f7       	brne	.-38     	; 0x1d26 <main+0x128>
    1d4c:	16 c0       	rjmp	.+44     	; 0x1d7a <main+0x17c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d4e:	fe 01       	movw	r30, r28
    1d50:	ff 96       	adiw	r30, 0x3f	; 63
    1d52:	60 81       	ld	r22, Z
    1d54:	71 81       	ldd	r23, Z+1	; 0x01
    1d56:	82 81       	ldd	r24, Z+2	; 0x02
    1d58:	93 81       	ldd	r25, Z+3	; 0x03
    1d5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d5e:	dc 01       	movw	r26, r24
    1d60:	cb 01       	movw	r24, r22
    1d62:	9e af       	std	Y+62, r25	; 0x3e
    1d64:	8d af       	std	Y+61, r24	; 0x3d
    1d66:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d68:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d6a:	9a af       	std	Y+58, r25	; 0x3a
    1d6c:	89 af       	std	Y+57, r24	; 0x39
    1d6e:	89 ad       	ldd	r24, Y+57	; 0x39
    1d70:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d72:	01 97       	sbiw	r24, 0x01	; 1
    1d74:	f1 f7       	brne	.-4      	; 0x1d72 <main+0x174>
    1d76:	9a af       	std	Y+58, r25	; 0x3a
    1d78:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(1500);
			LCD_clearScreen();
    1d7a:	0e 94 65 0c 	call	0x18ca	; 0x18ca <LCD_clearScreen>


			set_servo_angle(1000);  // Scan left
    1d7e:	88 ee       	ldi	r24, 0xE8	; 232
    1d80:	93 e0       	ldi	r25, 0x03	; 3
    1d82:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <set_servo_angle>
			LCD_displayString("Scan left");
    1d86:	8e e6       	ldi	r24, 0x6E	; 110
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_displayString>
			left_distance = Ultrasonic_readDistance();
    1d8e:	0e 94 5f 07 	call	0xebe	; 0xebe <Ultrasonic_readDistance>
    1d92:	90 93 ab 00 	sts	0x00AB, r25
    1d96:	80 93 aa 00 	sts	0x00AA, r24
    1d9a:	80 e0       	ldi	r24, 0x00	; 0
    1d9c:	90 e8       	ldi	r25, 0x80	; 128
    1d9e:	ab eb       	ldi	r26, 0xBB	; 187
    1da0:	b4 e4       	ldi	r27, 0x44	; 68
    1da2:	8d ab       	std	Y+53, r24	; 0x35
    1da4:	9e ab       	std	Y+54, r25	; 0x36
    1da6:	af ab       	std	Y+55, r26	; 0x37
    1da8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1daa:	6d a9       	ldd	r22, Y+53	; 0x35
    1dac:	7e a9       	ldd	r23, Y+54	; 0x36
    1dae:	8f a9       	ldd	r24, Y+55	; 0x37
    1db0:	98 ad       	ldd	r25, Y+56	; 0x38
    1db2:	20 e0       	ldi	r18, 0x00	; 0
    1db4:	30 e0       	ldi	r19, 0x00	; 0
    1db6:	4a ef       	ldi	r20, 0xFA	; 250
    1db8:	54 e4       	ldi	r21, 0x44	; 68
    1dba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dbe:	dc 01       	movw	r26, r24
    1dc0:	cb 01       	movw	r24, r22
    1dc2:	89 ab       	std	Y+49, r24	; 0x31
    1dc4:	9a ab       	std	Y+50, r25	; 0x32
    1dc6:	ab ab       	std	Y+51, r26	; 0x33
    1dc8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1dca:	69 a9       	ldd	r22, Y+49	; 0x31
    1dcc:	7a a9       	ldd	r23, Y+50	; 0x32
    1dce:	8b a9       	ldd	r24, Y+51	; 0x33
    1dd0:	9c a9       	ldd	r25, Y+52	; 0x34
    1dd2:	20 e0       	ldi	r18, 0x00	; 0
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	40 e8       	ldi	r20, 0x80	; 128
    1dd8:	5f e3       	ldi	r21, 0x3F	; 63
    1dda:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1dde:	88 23       	and	r24, r24
    1de0:	2c f4       	brge	.+10     	; 0x1dec <main+0x1ee>
		__ticks = 1;
    1de2:	81 e0       	ldi	r24, 0x01	; 1
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	98 ab       	std	Y+48, r25	; 0x30
    1de8:	8f a7       	std	Y+47, r24	; 0x2f
    1dea:	3f c0       	rjmp	.+126    	; 0x1e6a <main+0x26c>
	else if (__tmp > 65535)
    1dec:	69 a9       	ldd	r22, Y+49	; 0x31
    1dee:	7a a9       	ldd	r23, Y+50	; 0x32
    1df0:	8b a9       	ldd	r24, Y+51	; 0x33
    1df2:	9c a9       	ldd	r25, Y+52	; 0x34
    1df4:	20 e0       	ldi	r18, 0x00	; 0
    1df6:	3f ef       	ldi	r19, 0xFF	; 255
    1df8:	4f e7       	ldi	r20, 0x7F	; 127
    1dfa:	57 e4       	ldi	r21, 0x47	; 71
    1dfc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e00:	18 16       	cp	r1, r24
    1e02:	4c f5       	brge	.+82     	; 0x1e56 <main+0x258>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e04:	6d a9       	ldd	r22, Y+53	; 0x35
    1e06:	7e a9       	ldd	r23, Y+54	; 0x36
    1e08:	8f a9       	ldd	r24, Y+55	; 0x37
    1e0a:	98 ad       	ldd	r25, Y+56	; 0x38
    1e0c:	20 e0       	ldi	r18, 0x00	; 0
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	40 e2       	ldi	r20, 0x20	; 32
    1e12:	51 e4       	ldi	r21, 0x41	; 65
    1e14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e18:	dc 01       	movw	r26, r24
    1e1a:	cb 01       	movw	r24, r22
    1e1c:	bc 01       	movw	r22, r24
    1e1e:	cd 01       	movw	r24, r26
    1e20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e24:	dc 01       	movw	r26, r24
    1e26:	cb 01       	movw	r24, r22
    1e28:	98 ab       	std	Y+48, r25	; 0x30
    1e2a:	8f a7       	std	Y+47, r24	; 0x2f
    1e2c:	0f c0       	rjmp	.+30     	; 0x1e4c <main+0x24e>
    1e2e:	88 ec       	ldi	r24, 0xC8	; 200
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	9e a7       	std	Y+46, r25	; 0x2e
    1e34:	8d a7       	std	Y+45, r24	; 0x2d
    1e36:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e38:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e3a:	01 97       	sbiw	r24, 0x01	; 1
    1e3c:	f1 f7       	brne	.-4      	; 0x1e3a <main+0x23c>
    1e3e:	9e a7       	std	Y+46, r25	; 0x2e
    1e40:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e42:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e44:	98 a9       	ldd	r25, Y+48	; 0x30
    1e46:	01 97       	sbiw	r24, 0x01	; 1
    1e48:	98 ab       	std	Y+48, r25	; 0x30
    1e4a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e4c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e4e:	98 a9       	ldd	r25, Y+48	; 0x30
    1e50:	00 97       	sbiw	r24, 0x00	; 0
    1e52:	69 f7       	brne	.-38     	; 0x1e2e <main+0x230>
    1e54:	14 c0       	rjmp	.+40     	; 0x1e7e <main+0x280>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e56:	69 a9       	ldd	r22, Y+49	; 0x31
    1e58:	7a a9       	ldd	r23, Y+50	; 0x32
    1e5a:	8b a9       	ldd	r24, Y+51	; 0x33
    1e5c:	9c a9       	ldd	r25, Y+52	; 0x34
    1e5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e62:	dc 01       	movw	r26, r24
    1e64:	cb 01       	movw	r24, r22
    1e66:	98 ab       	std	Y+48, r25	; 0x30
    1e68:	8f a7       	std	Y+47, r24	; 0x2f
    1e6a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e6c:	98 a9       	ldd	r25, Y+48	; 0x30
    1e6e:	9c a7       	std	Y+44, r25	; 0x2c
    1e70:	8b a7       	std	Y+43, r24	; 0x2b
    1e72:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e74:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e76:	01 97       	sbiw	r24, 0x01	; 1
    1e78:	f1 f7       	brne	.-4      	; 0x1e76 <main+0x278>
    1e7a:	9c a7       	std	Y+44, r25	; 0x2c
    1e7c:	8b a7       	std	Y+43, r24	; 0x2b

			_delay_ms(1500);

			set_servo_angle(2000);  // Scan right
    1e7e:	80 ed       	ldi	r24, 0xD0	; 208
    1e80:	97 e0       	ldi	r25, 0x07	; 7
    1e82:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <set_servo_angle>
			right_distance = Ultrasonic_readDistance();
    1e86:	0e 94 5f 07 	call	0xebe	; 0xebe <Ultrasonic_readDistance>
    1e8a:	90 93 ad 00 	sts	0x00AD, r25
    1e8e:	80 93 ac 00 	sts	0x00AC, r24
			LCD_clearScreen();
    1e92:	0e 94 65 0c 	call	0x18ca	; 0x18ca <LCD_clearScreen>
			LCD_displayString("Scan  right");
    1e96:	88 e7       	ldi	r24, 0x78	; 120
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_displayString>
    1e9e:	80 e0       	ldi	r24, 0x00	; 0
    1ea0:	90 e8       	ldi	r25, 0x80	; 128
    1ea2:	ab eb       	ldi	r26, 0xBB	; 187
    1ea4:	b4 e4       	ldi	r27, 0x44	; 68
    1ea6:	8f a3       	std	Y+39, r24	; 0x27
    1ea8:	98 a7       	std	Y+40, r25	; 0x28
    1eaa:	a9 a7       	std	Y+41, r26	; 0x29
    1eac:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eae:	6f a1       	ldd	r22, Y+39	; 0x27
    1eb0:	78 a5       	ldd	r23, Y+40	; 0x28
    1eb2:	89 a5       	ldd	r24, Y+41	; 0x29
    1eb4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1eb6:	20 e0       	ldi	r18, 0x00	; 0
    1eb8:	30 e0       	ldi	r19, 0x00	; 0
    1eba:	4a ef       	ldi	r20, 0xFA	; 250
    1ebc:	54 e4       	ldi	r21, 0x44	; 68
    1ebe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ec2:	dc 01       	movw	r26, r24
    1ec4:	cb 01       	movw	r24, r22
    1ec6:	8b a3       	std	Y+35, r24	; 0x23
    1ec8:	9c a3       	std	Y+36, r25	; 0x24
    1eca:	ad a3       	std	Y+37, r26	; 0x25
    1ecc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ece:	6b a1       	ldd	r22, Y+35	; 0x23
    1ed0:	7c a1       	ldd	r23, Y+36	; 0x24
    1ed2:	8d a1       	ldd	r24, Y+37	; 0x25
    1ed4:	9e a1       	ldd	r25, Y+38	; 0x26
    1ed6:	20 e0       	ldi	r18, 0x00	; 0
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	40 e8       	ldi	r20, 0x80	; 128
    1edc:	5f e3       	ldi	r21, 0x3F	; 63
    1ede:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ee2:	88 23       	and	r24, r24
    1ee4:	2c f4       	brge	.+10     	; 0x1ef0 <main+0x2f2>
		__ticks = 1;
    1ee6:	81 e0       	ldi	r24, 0x01	; 1
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	9a a3       	std	Y+34, r25	; 0x22
    1eec:	89 a3       	std	Y+33, r24	; 0x21
    1eee:	3f c0       	rjmp	.+126    	; 0x1f6e <main+0x370>
	else if (__tmp > 65535)
    1ef0:	6b a1       	ldd	r22, Y+35	; 0x23
    1ef2:	7c a1       	ldd	r23, Y+36	; 0x24
    1ef4:	8d a1       	ldd	r24, Y+37	; 0x25
    1ef6:	9e a1       	ldd	r25, Y+38	; 0x26
    1ef8:	20 e0       	ldi	r18, 0x00	; 0
    1efa:	3f ef       	ldi	r19, 0xFF	; 255
    1efc:	4f e7       	ldi	r20, 0x7F	; 127
    1efe:	57 e4       	ldi	r21, 0x47	; 71
    1f00:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f04:	18 16       	cp	r1, r24
    1f06:	4c f5       	brge	.+82     	; 0x1f5a <main+0x35c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f08:	6f a1       	ldd	r22, Y+39	; 0x27
    1f0a:	78 a5       	ldd	r23, Y+40	; 0x28
    1f0c:	89 a5       	ldd	r24, Y+41	; 0x29
    1f0e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f10:	20 e0       	ldi	r18, 0x00	; 0
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	40 e2       	ldi	r20, 0x20	; 32
    1f16:	51 e4       	ldi	r21, 0x41	; 65
    1f18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f1c:	dc 01       	movw	r26, r24
    1f1e:	cb 01       	movw	r24, r22
    1f20:	bc 01       	movw	r22, r24
    1f22:	cd 01       	movw	r24, r26
    1f24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f28:	dc 01       	movw	r26, r24
    1f2a:	cb 01       	movw	r24, r22
    1f2c:	9a a3       	std	Y+34, r25	; 0x22
    1f2e:	89 a3       	std	Y+33, r24	; 0x21
    1f30:	0f c0       	rjmp	.+30     	; 0x1f50 <main+0x352>
    1f32:	88 ec       	ldi	r24, 0xC8	; 200
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	98 a3       	std	Y+32, r25	; 0x20
    1f38:	8f 8f       	std	Y+31, r24	; 0x1f
    1f3a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f3c:	98 a1       	ldd	r25, Y+32	; 0x20
    1f3e:	01 97       	sbiw	r24, 0x01	; 1
    1f40:	f1 f7       	brne	.-4      	; 0x1f3e <main+0x340>
    1f42:	98 a3       	std	Y+32, r25	; 0x20
    1f44:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f46:	89 a1       	ldd	r24, Y+33	; 0x21
    1f48:	9a a1       	ldd	r25, Y+34	; 0x22
    1f4a:	01 97       	sbiw	r24, 0x01	; 1
    1f4c:	9a a3       	std	Y+34, r25	; 0x22
    1f4e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f50:	89 a1       	ldd	r24, Y+33	; 0x21
    1f52:	9a a1       	ldd	r25, Y+34	; 0x22
    1f54:	00 97       	sbiw	r24, 0x00	; 0
    1f56:	69 f7       	brne	.-38     	; 0x1f32 <main+0x334>
    1f58:	14 c0       	rjmp	.+40     	; 0x1f82 <main+0x384>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f5a:	6b a1       	ldd	r22, Y+35	; 0x23
    1f5c:	7c a1       	ldd	r23, Y+36	; 0x24
    1f5e:	8d a1       	ldd	r24, Y+37	; 0x25
    1f60:	9e a1       	ldd	r25, Y+38	; 0x26
    1f62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f66:	dc 01       	movw	r26, r24
    1f68:	cb 01       	movw	r24, r22
    1f6a:	9a a3       	std	Y+34, r25	; 0x22
    1f6c:	89 a3       	std	Y+33, r24	; 0x21
    1f6e:	89 a1       	ldd	r24, Y+33	; 0x21
    1f70:	9a a1       	ldd	r25, Y+34	; 0x22
    1f72:	9e 8f       	std	Y+30, r25	; 0x1e
    1f74:	8d 8f       	std	Y+29, r24	; 0x1d
    1f76:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f78:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f7a:	01 97       	sbiw	r24, 0x01	; 1
    1f7c:	f1 f7       	brne	.-4      	; 0x1f7a <main+0x37c>
    1f7e:	9e 8f       	std	Y+30, r25	; 0x1e
    1f80:	8d 8f       	std	Y+29, r24	; 0x1d

			_delay_ms(1500);
			set_servo_angle(1500);  // Center servo again
    1f82:	8c ed       	ldi	r24, 0xDC	; 220
    1f84:	95 e0       	ldi	r25, 0x05	; 5
    1f86:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <set_servo_angle>
			LCD_clearScreen();
    1f8a:	0e 94 65 0c 	call	0x18ca	; 0x18ca <LCD_clearScreen>

			if (left_distance > right_distance) {
    1f8e:	20 91 aa 00 	lds	r18, 0x00AA
    1f92:	30 91 ab 00 	lds	r19, 0x00AB
    1f96:	80 91 ac 00 	lds	r24, 0x00AC
    1f9a:	90 91 ad 00 	lds	r25, 0x00AD
    1f9e:	82 17       	cp	r24, r18
    1fa0:	93 07       	cpc	r25, r19
    1fa2:	08 f0       	brcs	.+2      	; 0x1fa6 <main+0x3a8>
    1fa4:	7b c0       	rjmp	.+246    	; 0x209c <main+0x49e>
				turn_left();
    1fa6:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <turn_left>
				LCD_clearScreen();
    1faa:	0e 94 65 0c 	call	0x18ca	; 0x18ca <LCD_clearScreen>
				LCD_displayString("turn_left");
    1fae:	84 e8       	ldi	r24, 0x84	; 132
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_displayString>
    1fb6:	80 e0       	ldi	r24, 0x00	; 0
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	aa ef       	ldi	r26, 0xFA	; 250
    1fbc:	b3 e4       	ldi	r27, 0x43	; 67
    1fbe:	89 8f       	std	Y+25, r24	; 0x19
    1fc0:	9a 8f       	std	Y+26, r25	; 0x1a
    1fc2:	ab 8f       	std	Y+27, r26	; 0x1b
    1fc4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fc6:	69 8d       	ldd	r22, Y+25	; 0x19
    1fc8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fcc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fce:	20 e0       	ldi	r18, 0x00	; 0
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	4a ef       	ldi	r20, 0xFA	; 250
    1fd4:	54 e4       	ldi	r21, 0x44	; 68
    1fd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fda:	dc 01       	movw	r26, r24
    1fdc:	cb 01       	movw	r24, r22
    1fde:	8d 8b       	std	Y+21, r24	; 0x15
    1fe0:	9e 8b       	std	Y+22, r25	; 0x16
    1fe2:	af 8b       	std	Y+23, r26	; 0x17
    1fe4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1fe6:	6d 89       	ldd	r22, Y+21	; 0x15
    1fe8:	7e 89       	ldd	r23, Y+22	; 0x16
    1fea:	8f 89       	ldd	r24, Y+23	; 0x17
    1fec:	98 8d       	ldd	r25, Y+24	; 0x18
    1fee:	20 e0       	ldi	r18, 0x00	; 0
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	40 e8       	ldi	r20, 0x80	; 128
    1ff4:	5f e3       	ldi	r21, 0x3F	; 63
    1ff6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ffa:	88 23       	and	r24, r24
    1ffc:	2c f4       	brge	.+10     	; 0x2008 <main+0x40a>
		__ticks = 1;
    1ffe:	81 e0       	ldi	r24, 0x01	; 1
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	9c 8b       	std	Y+20, r25	; 0x14
    2004:	8b 8b       	std	Y+19, r24	; 0x13
    2006:	3f c0       	rjmp	.+126    	; 0x2086 <main+0x488>
	else if (__tmp > 65535)
    2008:	6d 89       	ldd	r22, Y+21	; 0x15
    200a:	7e 89       	ldd	r23, Y+22	; 0x16
    200c:	8f 89       	ldd	r24, Y+23	; 0x17
    200e:	98 8d       	ldd	r25, Y+24	; 0x18
    2010:	20 e0       	ldi	r18, 0x00	; 0
    2012:	3f ef       	ldi	r19, 0xFF	; 255
    2014:	4f e7       	ldi	r20, 0x7F	; 127
    2016:	57 e4       	ldi	r21, 0x47	; 71
    2018:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    201c:	18 16       	cp	r1, r24
    201e:	4c f5       	brge	.+82     	; 0x2072 <main+0x474>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2020:	69 8d       	ldd	r22, Y+25	; 0x19
    2022:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2024:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2026:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2028:	20 e0       	ldi	r18, 0x00	; 0
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	40 e2       	ldi	r20, 0x20	; 32
    202e:	51 e4       	ldi	r21, 0x41	; 65
    2030:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2034:	dc 01       	movw	r26, r24
    2036:	cb 01       	movw	r24, r22
    2038:	bc 01       	movw	r22, r24
    203a:	cd 01       	movw	r24, r26
    203c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2040:	dc 01       	movw	r26, r24
    2042:	cb 01       	movw	r24, r22
    2044:	9c 8b       	std	Y+20, r25	; 0x14
    2046:	8b 8b       	std	Y+19, r24	; 0x13
    2048:	0f c0       	rjmp	.+30     	; 0x2068 <main+0x46a>
    204a:	88 ec       	ldi	r24, 0xC8	; 200
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	9a 8b       	std	Y+18, r25	; 0x12
    2050:	89 8b       	std	Y+17, r24	; 0x11
    2052:	89 89       	ldd	r24, Y+17	; 0x11
    2054:	9a 89       	ldd	r25, Y+18	; 0x12
    2056:	01 97       	sbiw	r24, 0x01	; 1
    2058:	f1 f7       	brne	.-4      	; 0x2056 <main+0x458>
    205a:	9a 8b       	std	Y+18, r25	; 0x12
    205c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    205e:	8b 89       	ldd	r24, Y+19	; 0x13
    2060:	9c 89       	ldd	r25, Y+20	; 0x14
    2062:	01 97       	sbiw	r24, 0x01	; 1
    2064:	9c 8b       	std	Y+20, r25	; 0x14
    2066:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2068:	8b 89       	ldd	r24, Y+19	; 0x13
    206a:	9c 89       	ldd	r25, Y+20	; 0x14
    206c:	00 97       	sbiw	r24, 0x00	; 0
    206e:	69 f7       	brne	.-38     	; 0x204a <main+0x44c>
    2070:	e3 cd       	rjmp	.-1082   	; 0x1c38 <main+0x3a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2072:	6d 89       	ldd	r22, Y+21	; 0x15
    2074:	7e 89       	ldd	r23, Y+22	; 0x16
    2076:	8f 89       	ldd	r24, Y+23	; 0x17
    2078:	98 8d       	ldd	r25, Y+24	; 0x18
    207a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    207e:	dc 01       	movw	r26, r24
    2080:	cb 01       	movw	r24, r22
    2082:	9c 8b       	std	Y+20, r25	; 0x14
    2084:	8b 8b       	std	Y+19, r24	; 0x13
    2086:	8b 89       	ldd	r24, Y+19	; 0x13
    2088:	9c 89       	ldd	r25, Y+20	; 0x14
    208a:	98 8b       	std	Y+16, r25	; 0x10
    208c:	8f 87       	std	Y+15, r24	; 0x0f
    208e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2090:	98 89       	ldd	r25, Y+16	; 0x10
    2092:	01 97       	sbiw	r24, 0x01	; 1
    2094:	f1 f7       	brne	.-4      	; 0x2092 <main+0x494>
    2096:	98 8b       	std	Y+16, r25	; 0x10
    2098:	8f 87       	std	Y+15, r24	; 0x0f
    209a:	ce cd       	rjmp	.-1124   	; 0x1c38 <main+0x3a>
				_delay_ms(500);
			} else {
				turn_right();
    209c:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <turn_right>
				LCD_clearScreen();
    20a0:	0e 94 65 0c 	call	0x18ca	; 0x18ca <LCD_clearScreen>
				LCD_displayString("turn_right");
    20a4:	8e e8       	ldi	r24, 0x8E	; 142
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_displayString>
    20ac:	80 e0       	ldi	r24, 0x00	; 0
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	aa ef       	ldi	r26, 0xFA	; 250
    20b2:	b3 e4       	ldi	r27, 0x43	; 67
    20b4:	8b 87       	std	Y+11, r24	; 0x0b
    20b6:	9c 87       	std	Y+12, r25	; 0x0c
    20b8:	ad 87       	std	Y+13, r26	; 0x0d
    20ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    20be:	7c 85       	ldd	r23, Y+12	; 0x0c
    20c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    20c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    20c4:	20 e0       	ldi	r18, 0x00	; 0
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	4a ef       	ldi	r20, 0xFA	; 250
    20ca:	54 e4       	ldi	r21, 0x44	; 68
    20cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20d0:	dc 01       	movw	r26, r24
    20d2:	cb 01       	movw	r24, r22
    20d4:	8f 83       	std	Y+7, r24	; 0x07
    20d6:	98 87       	std	Y+8, r25	; 0x08
    20d8:	a9 87       	std	Y+9, r26	; 0x09
    20da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20dc:	6f 81       	ldd	r22, Y+7	; 0x07
    20de:	78 85       	ldd	r23, Y+8	; 0x08
    20e0:	89 85       	ldd	r24, Y+9	; 0x09
    20e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    20e4:	20 e0       	ldi	r18, 0x00	; 0
    20e6:	30 e0       	ldi	r19, 0x00	; 0
    20e8:	40 e8       	ldi	r20, 0x80	; 128
    20ea:	5f e3       	ldi	r21, 0x3F	; 63
    20ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20f0:	88 23       	and	r24, r24
    20f2:	2c f4       	brge	.+10     	; 0x20fe <main+0x500>
		__ticks = 1;
    20f4:	81 e0       	ldi	r24, 0x01	; 1
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	9e 83       	std	Y+6, r25	; 0x06
    20fa:	8d 83       	std	Y+5, r24	; 0x05
    20fc:	3f c0       	rjmp	.+126    	; 0x217c <main+0x57e>
	else if (__tmp > 65535)
    20fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2100:	78 85       	ldd	r23, Y+8	; 0x08
    2102:	89 85       	ldd	r24, Y+9	; 0x09
    2104:	9a 85       	ldd	r25, Y+10	; 0x0a
    2106:	20 e0       	ldi	r18, 0x00	; 0
    2108:	3f ef       	ldi	r19, 0xFF	; 255
    210a:	4f e7       	ldi	r20, 0x7F	; 127
    210c:	57 e4       	ldi	r21, 0x47	; 71
    210e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2112:	18 16       	cp	r1, r24
    2114:	4c f5       	brge	.+82     	; 0x2168 <main+0x56a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2116:	6b 85       	ldd	r22, Y+11	; 0x0b
    2118:	7c 85       	ldd	r23, Y+12	; 0x0c
    211a:	8d 85       	ldd	r24, Y+13	; 0x0d
    211c:	9e 85       	ldd	r25, Y+14	; 0x0e
    211e:	20 e0       	ldi	r18, 0x00	; 0
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	40 e2       	ldi	r20, 0x20	; 32
    2124:	51 e4       	ldi	r21, 0x41	; 65
    2126:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    212a:	dc 01       	movw	r26, r24
    212c:	cb 01       	movw	r24, r22
    212e:	bc 01       	movw	r22, r24
    2130:	cd 01       	movw	r24, r26
    2132:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2136:	dc 01       	movw	r26, r24
    2138:	cb 01       	movw	r24, r22
    213a:	9e 83       	std	Y+6, r25	; 0x06
    213c:	8d 83       	std	Y+5, r24	; 0x05
    213e:	0f c0       	rjmp	.+30     	; 0x215e <main+0x560>
    2140:	88 ec       	ldi	r24, 0xC8	; 200
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	9c 83       	std	Y+4, r25	; 0x04
    2146:	8b 83       	std	Y+3, r24	; 0x03
    2148:	8b 81       	ldd	r24, Y+3	; 0x03
    214a:	9c 81       	ldd	r25, Y+4	; 0x04
    214c:	01 97       	sbiw	r24, 0x01	; 1
    214e:	f1 f7       	brne	.-4      	; 0x214c <main+0x54e>
    2150:	9c 83       	std	Y+4, r25	; 0x04
    2152:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2154:	8d 81       	ldd	r24, Y+5	; 0x05
    2156:	9e 81       	ldd	r25, Y+6	; 0x06
    2158:	01 97       	sbiw	r24, 0x01	; 1
    215a:	9e 83       	std	Y+6, r25	; 0x06
    215c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    215e:	8d 81       	ldd	r24, Y+5	; 0x05
    2160:	9e 81       	ldd	r25, Y+6	; 0x06
    2162:	00 97       	sbiw	r24, 0x00	; 0
    2164:	69 f7       	brne	.-38     	; 0x2140 <main+0x542>
    2166:	68 cd       	rjmp	.-1328   	; 0x1c38 <main+0x3a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2168:	6f 81       	ldd	r22, Y+7	; 0x07
    216a:	78 85       	ldd	r23, Y+8	; 0x08
    216c:	89 85       	ldd	r24, Y+9	; 0x09
    216e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2170:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2174:	dc 01       	movw	r26, r24
    2176:	cb 01       	movw	r24, r22
    2178:	9e 83       	std	Y+6, r25	; 0x06
    217a:	8d 83       	std	Y+5, r24	; 0x05
    217c:	8d 81       	ldd	r24, Y+5	; 0x05
    217e:	9e 81       	ldd	r25, Y+6	; 0x06
    2180:	9a 83       	std	Y+2, r25	; 0x02
    2182:	89 83       	std	Y+1, r24	; 0x01
    2184:	89 81       	ldd	r24, Y+1	; 0x01
    2186:	9a 81       	ldd	r25, Y+2	; 0x02
    2188:	01 97       	sbiw	r24, 0x01	; 1
    218a:	f1 f7       	brne	.-4      	; 0x2188 <main+0x58a>
    218c:	9a 83       	std	Y+2, r25	; 0x02
    218e:	89 83       	std	Y+1, r24	; 0x01
    2190:	53 cd       	rjmp	.-1370   	; 0x1c38 <main+0x3a>
				_delay_ms(500);
			}
		} else {
			move_forward();
    2192:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <move_forward>
    2196:	50 cd       	rjmp	.-1376   	; 0x1c38 <main+0x3a>

00002198 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    2198:	df 93       	push	r29
    219a:	cf 93       	push	r28
    219c:	00 d0       	rcall	.+0      	; 0x219e <GPIO_setupPinDirection+0x6>
    219e:	00 d0       	rcall	.+0      	; 0x21a0 <GPIO_setupPinDirection+0x8>
    21a0:	0f 92       	push	r0
    21a2:	cd b7       	in	r28, 0x3d	; 61
    21a4:	de b7       	in	r29, 0x3e	; 62
    21a6:	89 83       	std	Y+1, r24	; 0x01
    21a8:	6a 83       	std	Y+2, r22	; 0x02
    21aa:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    21ac:	8a 81       	ldd	r24, Y+2	; 0x02
    21ae:	88 30       	cpi	r24, 0x08	; 8
    21b0:	08 f0       	brcs	.+2      	; 0x21b4 <GPIO_setupPinDirection+0x1c>
    21b2:	d5 c0       	rjmp	.+426    	; 0x235e <GPIO_setupPinDirection+0x1c6>
    21b4:	89 81       	ldd	r24, Y+1	; 0x01
    21b6:	84 30       	cpi	r24, 0x04	; 4
    21b8:	08 f0       	brcs	.+2      	; 0x21bc <GPIO_setupPinDirection+0x24>
    21ba:	d1 c0       	rjmp	.+418    	; 0x235e <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    21bc:	89 81       	ldd	r24, Y+1	; 0x01
    21be:	28 2f       	mov	r18, r24
    21c0:	30 e0       	ldi	r19, 0x00	; 0
    21c2:	3d 83       	std	Y+5, r19	; 0x05
    21c4:	2c 83       	std	Y+4, r18	; 0x04
    21c6:	8c 81       	ldd	r24, Y+4	; 0x04
    21c8:	9d 81       	ldd	r25, Y+5	; 0x05
    21ca:	81 30       	cpi	r24, 0x01	; 1
    21cc:	91 05       	cpc	r25, r1
    21ce:	09 f4       	brne	.+2      	; 0x21d2 <GPIO_setupPinDirection+0x3a>
    21d0:	43 c0       	rjmp	.+134    	; 0x2258 <GPIO_setupPinDirection+0xc0>
    21d2:	2c 81       	ldd	r18, Y+4	; 0x04
    21d4:	3d 81       	ldd	r19, Y+5	; 0x05
    21d6:	22 30       	cpi	r18, 0x02	; 2
    21d8:	31 05       	cpc	r19, r1
    21da:	2c f4       	brge	.+10     	; 0x21e6 <GPIO_setupPinDirection+0x4e>
    21dc:	8c 81       	ldd	r24, Y+4	; 0x04
    21de:	9d 81       	ldd	r25, Y+5	; 0x05
    21e0:	00 97       	sbiw	r24, 0x00	; 0
    21e2:	71 f0       	breq	.+28     	; 0x2200 <GPIO_setupPinDirection+0x68>
    21e4:	bc c0       	rjmp	.+376    	; 0x235e <GPIO_setupPinDirection+0x1c6>
    21e6:	2c 81       	ldd	r18, Y+4	; 0x04
    21e8:	3d 81       	ldd	r19, Y+5	; 0x05
    21ea:	22 30       	cpi	r18, 0x02	; 2
    21ec:	31 05       	cpc	r19, r1
    21ee:	09 f4       	brne	.+2      	; 0x21f2 <GPIO_setupPinDirection+0x5a>
    21f0:	5f c0       	rjmp	.+190    	; 0x22b0 <GPIO_setupPinDirection+0x118>
    21f2:	8c 81       	ldd	r24, Y+4	; 0x04
    21f4:	9d 81       	ldd	r25, Y+5	; 0x05
    21f6:	83 30       	cpi	r24, 0x03	; 3
    21f8:	91 05       	cpc	r25, r1
    21fa:	09 f4       	brne	.+2      	; 0x21fe <GPIO_setupPinDirection+0x66>
    21fc:	85 c0       	rjmp	.+266    	; 0x2308 <GPIO_setupPinDirection+0x170>
    21fe:	af c0       	rjmp	.+350    	; 0x235e <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    2200:	8b 81       	ldd	r24, Y+3	; 0x03
    2202:	81 30       	cpi	r24, 0x01	; 1
    2204:	a1 f4       	brne	.+40     	; 0x222e <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    2206:	aa e3       	ldi	r26, 0x3A	; 58
    2208:	b0 e0       	ldi	r27, 0x00	; 0
    220a:	ea e3       	ldi	r30, 0x3A	; 58
    220c:	f0 e0       	ldi	r31, 0x00	; 0
    220e:	80 81       	ld	r24, Z
    2210:	48 2f       	mov	r20, r24
    2212:	8a 81       	ldd	r24, Y+2	; 0x02
    2214:	28 2f       	mov	r18, r24
    2216:	30 e0       	ldi	r19, 0x00	; 0
    2218:	81 e0       	ldi	r24, 0x01	; 1
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	02 2e       	mov	r0, r18
    221e:	02 c0       	rjmp	.+4      	; 0x2224 <GPIO_setupPinDirection+0x8c>
    2220:	88 0f       	add	r24, r24
    2222:	99 1f       	adc	r25, r25
    2224:	0a 94       	dec	r0
    2226:	e2 f7       	brpl	.-8      	; 0x2220 <GPIO_setupPinDirection+0x88>
    2228:	84 2b       	or	r24, r20
    222a:	8c 93       	st	X, r24
    222c:	98 c0       	rjmp	.+304    	; 0x235e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    222e:	aa e3       	ldi	r26, 0x3A	; 58
    2230:	b0 e0       	ldi	r27, 0x00	; 0
    2232:	ea e3       	ldi	r30, 0x3A	; 58
    2234:	f0 e0       	ldi	r31, 0x00	; 0
    2236:	80 81       	ld	r24, Z
    2238:	48 2f       	mov	r20, r24
    223a:	8a 81       	ldd	r24, Y+2	; 0x02
    223c:	28 2f       	mov	r18, r24
    223e:	30 e0       	ldi	r19, 0x00	; 0
    2240:	81 e0       	ldi	r24, 0x01	; 1
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	02 2e       	mov	r0, r18
    2246:	02 c0       	rjmp	.+4      	; 0x224c <GPIO_setupPinDirection+0xb4>
    2248:	88 0f       	add	r24, r24
    224a:	99 1f       	adc	r25, r25
    224c:	0a 94       	dec	r0
    224e:	e2 f7       	brpl	.-8      	; 0x2248 <GPIO_setupPinDirection+0xb0>
    2250:	80 95       	com	r24
    2252:	84 23       	and	r24, r20
    2254:	8c 93       	st	X, r24
    2256:	83 c0       	rjmp	.+262    	; 0x235e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    2258:	8b 81       	ldd	r24, Y+3	; 0x03
    225a:	81 30       	cpi	r24, 0x01	; 1
    225c:	a1 f4       	brne	.+40     	; 0x2286 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    225e:	a7 e3       	ldi	r26, 0x37	; 55
    2260:	b0 e0       	ldi	r27, 0x00	; 0
    2262:	e7 e3       	ldi	r30, 0x37	; 55
    2264:	f0 e0       	ldi	r31, 0x00	; 0
    2266:	80 81       	ld	r24, Z
    2268:	48 2f       	mov	r20, r24
    226a:	8a 81       	ldd	r24, Y+2	; 0x02
    226c:	28 2f       	mov	r18, r24
    226e:	30 e0       	ldi	r19, 0x00	; 0
    2270:	81 e0       	ldi	r24, 0x01	; 1
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	02 2e       	mov	r0, r18
    2276:	02 c0       	rjmp	.+4      	; 0x227c <GPIO_setupPinDirection+0xe4>
    2278:	88 0f       	add	r24, r24
    227a:	99 1f       	adc	r25, r25
    227c:	0a 94       	dec	r0
    227e:	e2 f7       	brpl	.-8      	; 0x2278 <GPIO_setupPinDirection+0xe0>
    2280:	84 2b       	or	r24, r20
    2282:	8c 93       	st	X, r24
    2284:	6c c0       	rjmp	.+216    	; 0x235e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    2286:	a7 e3       	ldi	r26, 0x37	; 55
    2288:	b0 e0       	ldi	r27, 0x00	; 0
    228a:	e7 e3       	ldi	r30, 0x37	; 55
    228c:	f0 e0       	ldi	r31, 0x00	; 0
    228e:	80 81       	ld	r24, Z
    2290:	48 2f       	mov	r20, r24
    2292:	8a 81       	ldd	r24, Y+2	; 0x02
    2294:	28 2f       	mov	r18, r24
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	81 e0       	ldi	r24, 0x01	; 1
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	02 2e       	mov	r0, r18
    229e:	02 c0       	rjmp	.+4      	; 0x22a4 <GPIO_setupPinDirection+0x10c>
    22a0:	88 0f       	add	r24, r24
    22a2:	99 1f       	adc	r25, r25
    22a4:	0a 94       	dec	r0
    22a6:	e2 f7       	brpl	.-8      	; 0x22a0 <GPIO_setupPinDirection+0x108>
    22a8:	80 95       	com	r24
    22aa:	84 23       	and	r24, r20
    22ac:	8c 93       	st	X, r24
    22ae:	57 c0       	rjmp	.+174    	; 0x235e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    22b0:	8b 81       	ldd	r24, Y+3	; 0x03
    22b2:	81 30       	cpi	r24, 0x01	; 1
    22b4:	a1 f4       	brne	.+40     	; 0x22de <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    22b6:	a4 e3       	ldi	r26, 0x34	; 52
    22b8:	b0 e0       	ldi	r27, 0x00	; 0
    22ba:	e4 e3       	ldi	r30, 0x34	; 52
    22bc:	f0 e0       	ldi	r31, 0x00	; 0
    22be:	80 81       	ld	r24, Z
    22c0:	48 2f       	mov	r20, r24
    22c2:	8a 81       	ldd	r24, Y+2	; 0x02
    22c4:	28 2f       	mov	r18, r24
    22c6:	30 e0       	ldi	r19, 0x00	; 0
    22c8:	81 e0       	ldi	r24, 0x01	; 1
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	02 2e       	mov	r0, r18
    22ce:	02 c0       	rjmp	.+4      	; 0x22d4 <GPIO_setupPinDirection+0x13c>
    22d0:	88 0f       	add	r24, r24
    22d2:	99 1f       	adc	r25, r25
    22d4:	0a 94       	dec	r0
    22d6:	e2 f7       	brpl	.-8      	; 0x22d0 <GPIO_setupPinDirection+0x138>
    22d8:	84 2b       	or	r24, r20
    22da:	8c 93       	st	X, r24
    22dc:	40 c0       	rjmp	.+128    	; 0x235e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    22de:	a4 e3       	ldi	r26, 0x34	; 52
    22e0:	b0 e0       	ldi	r27, 0x00	; 0
    22e2:	e4 e3       	ldi	r30, 0x34	; 52
    22e4:	f0 e0       	ldi	r31, 0x00	; 0
    22e6:	80 81       	ld	r24, Z
    22e8:	48 2f       	mov	r20, r24
    22ea:	8a 81       	ldd	r24, Y+2	; 0x02
    22ec:	28 2f       	mov	r18, r24
    22ee:	30 e0       	ldi	r19, 0x00	; 0
    22f0:	81 e0       	ldi	r24, 0x01	; 1
    22f2:	90 e0       	ldi	r25, 0x00	; 0
    22f4:	02 2e       	mov	r0, r18
    22f6:	02 c0       	rjmp	.+4      	; 0x22fc <GPIO_setupPinDirection+0x164>
    22f8:	88 0f       	add	r24, r24
    22fa:	99 1f       	adc	r25, r25
    22fc:	0a 94       	dec	r0
    22fe:	e2 f7       	brpl	.-8      	; 0x22f8 <GPIO_setupPinDirection+0x160>
    2300:	80 95       	com	r24
    2302:	84 23       	and	r24, r20
    2304:	8c 93       	st	X, r24
    2306:	2b c0       	rjmp	.+86     	; 0x235e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    2308:	8b 81       	ldd	r24, Y+3	; 0x03
    230a:	81 30       	cpi	r24, 0x01	; 1
    230c:	a1 f4       	brne	.+40     	; 0x2336 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    230e:	a1 e3       	ldi	r26, 0x31	; 49
    2310:	b0 e0       	ldi	r27, 0x00	; 0
    2312:	e1 e3       	ldi	r30, 0x31	; 49
    2314:	f0 e0       	ldi	r31, 0x00	; 0
    2316:	80 81       	ld	r24, Z
    2318:	48 2f       	mov	r20, r24
    231a:	8a 81       	ldd	r24, Y+2	; 0x02
    231c:	28 2f       	mov	r18, r24
    231e:	30 e0       	ldi	r19, 0x00	; 0
    2320:	81 e0       	ldi	r24, 0x01	; 1
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	02 2e       	mov	r0, r18
    2326:	02 c0       	rjmp	.+4      	; 0x232c <GPIO_setupPinDirection+0x194>
    2328:	88 0f       	add	r24, r24
    232a:	99 1f       	adc	r25, r25
    232c:	0a 94       	dec	r0
    232e:	e2 f7       	brpl	.-8      	; 0x2328 <GPIO_setupPinDirection+0x190>
    2330:	84 2b       	or	r24, r20
    2332:	8c 93       	st	X, r24
    2334:	14 c0       	rjmp	.+40     	; 0x235e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    2336:	a1 e3       	ldi	r26, 0x31	; 49
    2338:	b0 e0       	ldi	r27, 0x00	; 0
    233a:	e1 e3       	ldi	r30, 0x31	; 49
    233c:	f0 e0       	ldi	r31, 0x00	; 0
    233e:	80 81       	ld	r24, Z
    2340:	48 2f       	mov	r20, r24
    2342:	8a 81       	ldd	r24, Y+2	; 0x02
    2344:	28 2f       	mov	r18, r24
    2346:	30 e0       	ldi	r19, 0x00	; 0
    2348:	81 e0       	ldi	r24, 0x01	; 1
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	02 2e       	mov	r0, r18
    234e:	02 c0       	rjmp	.+4      	; 0x2354 <GPIO_setupPinDirection+0x1bc>
    2350:	88 0f       	add	r24, r24
    2352:	99 1f       	adc	r25, r25
    2354:	0a 94       	dec	r0
    2356:	e2 f7       	brpl	.-8      	; 0x2350 <GPIO_setupPinDirection+0x1b8>
    2358:	80 95       	com	r24
    235a:	84 23       	and	r24, r20
    235c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    235e:	0f 90       	pop	r0
    2360:	0f 90       	pop	r0
    2362:	0f 90       	pop	r0
    2364:	0f 90       	pop	r0
    2366:	0f 90       	pop	r0
    2368:	cf 91       	pop	r28
    236a:	df 91       	pop	r29
    236c:	08 95       	ret

0000236e <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    236e:	df 93       	push	r29
    2370:	cf 93       	push	r28
    2372:	00 d0       	rcall	.+0      	; 0x2374 <GPIO_writePin+0x6>
    2374:	00 d0       	rcall	.+0      	; 0x2376 <GPIO_writePin+0x8>
    2376:	0f 92       	push	r0
    2378:	cd b7       	in	r28, 0x3d	; 61
    237a:	de b7       	in	r29, 0x3e	; 62
    237c:	89 83       	std	Y+1, r24	; 0x01
    237e:	6a 83       	std	Y+2, r22	; 0x02
    2380:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2382:	8a 81       	ldd	r24, Y+2	; 0x02
    2384:	88 30       	cpi	r24, 0x08	; 8
    2386:	08 f0       	brcs	.+2      	; 0x238a <GPIO_writePin+0x1c>
    2388:	d5 c0       	rjmp	.+426    	; 0x2534 <GPIO_writePin+0x1c6>
    238a:	89 81       	ldd	r24, Y+1	; 0x01
    238c:	84 30       	cpi	r24, 0x04	; 4
    238e:	08 f0       	brcs	.+2      	; 0x2392 <GPIO_writePin+0x24>
    2390:	d1 c0       	rjmp	.+418    	; 0x2534 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    2392:	89 81       	ldd	r24, Y+1	; 0x01
    2394:	28 2f       	mov	r18, r24
    2396:	30 e0       	ldi	r19, 0x00	; 0
    2398:	3d 83       	std	Y+5, r19	; 0x05
    239a:	2c 83       	std	Y+4, r18	; 0x04
    239c:	8c 81       	ldd	r24, Y+4	; 0x04
    239e:	9d 81       	ldd	r25, Y+5	; 0x05
    23a0:	81 30       	cpi	r24, 0x01	; 1
    23a2:	91 05       	cpc	r25, r1
    23a4:	09 f4       	brne	.+2      	; 0x23a8 <GPIO_writePin+0x3a>
    23a6:	43 c0       	rjmp	.+134    	; 0x242e <GPIO_writePin+0xc0>
    23a8:	2c 81       	ldd	r18, Y+4	; 0x04
    23aa:	3d 81       	ldd	r19, Y+5	; 0x05
    23ac:	22 30       	cpi	r18, 0x02	; 2
    23ae:	31 05       	cpc	r19, r1
    23b0:	2c f4       	brge	.+10     	; 0x23bc <GPIO_writePin+0x4e>
    23b2:	8c 81       	ldd	r24, Y+4	; 0x04
    23b4:	9d 81       	ldd	r25, Y+5	; 0x05
    23b6:	00 97       	sbiw	r24, 0x00	; 0
    23b8:	71 f0       	breq	.+28     	; 0x23d6 <GPIO_writePin+0x68>
    23ba:	bc c0       	rjmp	.+376    	; 0x2534 <GPIO_writePin+0x1c6>
    23bc:	2c 81       	ldd	r18, Y+4	; 0x04
    23be:	3d 81       	ldd	r19, Y+5	; 0x05
    23c0:	22 30       	cpi	r18, 0x02	; 2
    23c2:	31 05       	cpc	r19, r1
    23c4:	09 f4       	brne	.+2      	; 0x23c8 <GPIO_writePin+0x5a>
    23c6:	5f c0       	rjmp	.+190    	; 0x2486 <GPIO_writePin+0x118>
    23c8:	8c 81       	ldd	r24, Y+4	; 0x04
    23ca:	9d 81       	ldd	r25, Y+5	; 0x05
    23cc:	83 30       	cpi	r24, 0x03	; 3
    23ce:	91 05       	cpc	r25, r1
    23d0:	09 f4       	brne	.+2      	; 0x23d4 <GPIO_writePin+0x66>
    23d2:	85 c0       	rjmp	.+266    	; 0x24de <GPIO_writePin+0x170>
    23d4:	af c0       	rjmp	.+350    	; 0x2534 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    23d6:	8b 81       	ldd	r24, Y+3	; 0x03
    23d8:	81 30       	cpi	r24, 0x01	; 1
    23da:	a1 f4       	brne	.+40     	; 0x2404 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    23dc:	ab e3       	ldi	r26, 0x3B	; 59
    23de:	b0 e0       	ldi	r27, 0x00	; 0
    23e0:	eb e3       	ldi	r30, 0x3B	; 59
    23e2:	f0 e0       	ldi	r31, 0x00	; 0
    23e4:	80 81       	ld	r24, Z
    23e6:	48 2f       	mov	r20, r24
    23e8:	8a 81       	ldd	r24, Y+2	; 0x02
    23ea:	28 2f       	mov	r18, r24
    23ec:	30 e0       	ldi	r19, 0x00	; 0
    23ee:	81 e0       	ldi	r24, 0x01	; 1
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	02 2e       	mov	r0, r18
    23f4:	02 c0       	rjmp	.+4      	; 0x23fa <GPIO_writePin+0x8c>
    23f6:	88 0f       	add	r24, r24
    23f8:	99 1f       	adc	r25, r25
    23fa:	0a 94       	dec	r0
    23fc:	e2 f7       	brpl	.-8      	; 0x23f6 <GPIO_writePin+0x88>
    23fe:	84 2b       	or	r24, r20
    2400:	8c 93       	st	X, r24
    2402:	98 c0       	rjmp	.+304    	; 0x2534 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    2404:	ab e3       	ldi	r26, 0x3B	; 59
    2406:	b0 e0       	ldi	r27, 0x00	; 0
    2408:	eb e3       	ldi	r30, 0x3B	; 59
    240a:	f0 e0       	ldi	r31, 0x00	; 0
    240c:	80 81       	ld	r24, Z
    240e:	48 2f       	mov	r20, r24
    2410:	8a 81       	ldd	r24, Y+2	; 0x02
    2412:	28 2f       	mov	r18, r24
    2414:	30 e0       	ldi	r19, 0x00	; 0
    2416:	81 e0       	ldi	r24, 0x01	; 1
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	02 2e       	mov	r0, r18
    241c:	02 c0       	rjmp	.+4      	; 0x2422 <GPIO_writePin+0xb4>
    241e:	88 0f       	add	r24, r24
    2420:	99 1f       	adc	r25, r25
    2422:	0a 94       	dec	r0
    2424:	e2 f7       	brpl	.-8      	; 0x241e <GPIO_writePin+0xb0>
    2426:	80 95       	com	r24
    2428:	84 23       	and	r24, r20
    242a:	8c 93       	st	X, r24
    242c:	83 c0       	rjmp	.+262    	; 0x2534 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    242e:	8b 81       	ldd	r24, Y+3	; 0x03
    2430:	81 30       	cpi	r24, 0x01	; 1
    2432:	a1 f4       	brne	.+40     	; 0x245c <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    2434:	a8 e3       	ldi	r26, 0x38	; 56
    2436:	b0 e0       	ldi	r27, 0x00	; 0
    2438:	e8 e3       	ldi	r30, 0x38	; 56
    243a:	f0 e0       	ldi	r31, 0x00	; 0
    243c:	80 81       	ld	r24, Z
    243e:	48 2f       	mov	r20, r24
    2440:	8a 81       	ldd	r24, Y+2	; 0x02
    2442:	28 2f       	mov	r18, r24
    2444:	30 e0       	ldi	r19, 0x00	; 0
    2446:	81 e0       	ldi	r24, 0x01	; 1
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	02 2e       	mov	r0, r18
    244c:	02 c0       	rjmp	.+4      	; 0x2452 <GPIO_writePin+0xe4>
    244e:	88 0f       	add	r24, r24
    2450:	99 1f       	adc	r25, r25
    2452:	0a 94       	dec	r0
    2454:	e2 f7       	brpl	.-8      	; 0x244e <GPIO_writePin+0xe0>
    2456:	84 2b       	or	r24, r20
    2458:	8c 93       	st	X, r24
    245a:	6c c0       	rjmp	.+216    	; 0x2534 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    245c:	a8 e3       	ldi	r26, 0x38	; 56
    245e:	b0 e0       	ldi	r27, 0x00	; 0
    2460:	e8 e3       	ldi	r30, 0x38	; 56
    2462:	f0 e0       	ldi	r31, 0x00	; 0
    2464:	80 81       	ld	r24, Z
    2466:	48 2f       	mov	r20, r24
    2468:	8a 81       	ldd	r24, Y+2	; 0x02
    246a:	28 2f       	mov	r18, r24
    246c:	30 e0       	ldi	r19, 0x00	; 0
    246e:	81 e0       	ldi	r24, 0x01	; 1
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	02 2e       	mov	r0, r18
    2474:	02 c0       	rjmp	.+4      	; 0x247a <GPIO_writePin+0x10c>
    2476:	88 0f       	add	r24, r24
    2478:	99 1f       	adc	r25, r25
    247a:	0a 94       	dec	r0
    247c:	e2 f7       	brpl	.-8      	; 0x2476 <GPIO_writePin+0x108>
    247e:	80 95       	com	r24
    2480:	84 23       	and	r24, r20
    2482:	8c 93       	st	X, r24
    2484:	57 c0       	rjmp	.+174    	; 0x2534 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    2486:	8b 81       	ldd	r24, Y+3	; 0x03
    2488:	81 30       	cpi	r24, 0x01	; 1
    248a:	a1 f4       	brne	.+40     	; 0x24b4 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    248c:	a5 e3       	ldi	r26, 0x35	; 53
    248e:	b0 e0       	ldi	r27, 0x00	; 0
    2490:	e5 e3       	ldi	r30, 0x35	; 53
    2492:	f0 e0       	ldi	r31, 0x00	; 0
    2494:	80 81       	ld	r24, Z
    2496:	48 2f       	mov	r20, r24
    2498:	8a 81       	ldd	r24, Y+2	; 0x02
    249a:	28 2f       	mov	r18, r24
    249c:	30 e0       	ldi	r19, 0x00	; 0
    249e:	81 e0       	ldi	r24, 0x01	; 1
    24a0:	90 e0       	ldi	r25, 0x00	; 0
    24a2:	02 2e       	mov	r0, r18
    24a4:	02 c0       	rjmp	.+4      	; 0x24aa <GPIO_writePin+0x13c>
    24a6:	88 0f       	add	r24, r24
    24a8:	99 1f       	adc	r25, r25
    24aa:	0a 94       	dec	r0
    24ac:	e2 f7       	brpl	.-8      	; 0x24a6 <GPIO_writePin+0x138>
    24ae:	84 2b       	or	r24, r20
    24b0:	8c 93       	st	X, r24
    24b2:	40 c0       	rjmp	.+128    	; 0x2534 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    24b4:	a5 e3       	ldi	r26, 0x35	; 53
    24b6:	b0 e0       	ldi	r27, 0x00	; 0
    24b8:	e5 e3       	ldi	r30, 0x35	; 53
    24ba:	f0 e0       	ldi	r31, 0x00	; 0
    24bc:	80 81       	ld	r24, Z
    24be:	48 2f       	mov	r20, r24
    24c0:	8a 81       	ldd	r24, Y+2	; 0x02
    24c2:	28 2f       	mov	r18, r24
    24c4:	30 e0       	ldi	r19, 0x00	; 0
    24c6:	81 e0       	ldi	r24, 0x01	; 1
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	02 2e       	mov	r0, r18
    24cc:	02 c0       	rjmp	.+4      	; 0x24d2 <GPIO_writePin+0x164>
    24ce:	88 0f       	add	r24, r24
    24d0:	99 1f       	adc	r25, r25
    24d2:	0a 94       	dec	r0
    24d4:	e2 f7       	brpl	.-8      	; 0x24ce <GPIO_writePin+0x160>
    24d6:	80 95       	com	r24
    24d8:	84 23       	and	r24, r20
    24da:	8c 93       	st	X, r24
    24dc:	2b c0       	rjmp	.+86     	; 0x2534 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    24de:	8b 81       	ldd	r24, Y+3	; 0x03
    24e0:	81 30       	cpi	r24, 0x01	; 1
    24e2:	a1 f4       	brne	.+40     	; 0x250c <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    24e4:	a2 e3       	ldi	r26, 0x32	; 50
    24e6:	b0 e0       	ldi	r27, 0x00	; 0
    24e8:	e2 e3       	ldi	r30, 0x32	; 50
    24ea:	f0 e0       	ldi	r31, 0x00	; 0
    24ec:	80 81       	ld	r24, Z
    24ee:	48 2f       	mov	r20, r24
    24f0:	8a 81       	ldd	r24, Y+2	; 0x02
    24f2:	28 2f       	mov	r18, r24
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	81 e0       	ldi	r24, 0x01	; 1
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	02 2e       	mov	r0, r18
    24fc:	02 c0       	rjmp	.+4      	; 0x2502 <GPIO_writePin+0x194>
    24fe:	88 0f       	add	r24, r24
    2500:	99 1f       	adc	r25, r25
    2502:	0a 94       	dec	r0
    2504:	e2 f7       	brpl	.-8      	; 0x24fe <GPIO_writePin+0x190>
    2506:	84 2b       	or	r24, r20
    2508:	8c 93       	st	X, r24
    250a:	14 c0       	rjmp	.+40     	; 0x2534 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    250c:	a2 e3       	ldi	r26, 0x32	; 50
    250e:	b0 e0       	ldi	r27, 0x00	; 0
    2510:	e2 e3       	ldi	r30, 0x32	; 50
    2512:	f0 e0       	ldi	r31, 0x00	; 0
    2514:	80 81       	ld	r24, Z
    2516:	48 2f       	mov	r20, r24
    2518:	8a 81       	ldd	r24, Y+2	; 0x02
    251a:	28 2f       	mov	r18, r24
    251c:	30 e0       	ldi	r19, 0x00	; 0
    251e:	81 e0       	ldi	r24, 0x01	; 1
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	02 2e       	mov	r0, r18
    2524:	02 c0       	rjmp	.+4      	; 0x252a <GPIO_writePin+0x1bc>
    2526:	88 0f       	add	r24, r24
    2528:	99 1f       	adc	r25, r25
    252a:	0a 94       	dec	r0
    252c:	e2 f7       	brpl	.-8      	; 0x2526 <GPIO_writePin+0x1b8>
    252e:	80 95       	com	r24
    2530:	84 23       	and	r24, r20
    2532:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2534:	0f 90       	pop	r0
    2536:	0f 90       	pop	r0
    2538:	0f 90       	pop	r0
    253a:	0f 90       	pop	r0
    253c:	0f 90       	pop	r0
    253e:	cf 91       	pop	r28
    2540:	df 91       	pop	r29
    2542:	08 95       	ret

00002544 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    2544:	df 93       	push	r29
    2546:	cf 93       	push	r28
    2548:	00 d0       	rcall	.+0      	; 0x254a <GPIO_readPin+0x6>
    254a:	00 d0       	rcall	.+0      	; 0x254c <GPIO_readPin+0x8>
    254c:	0f 92       	push	r0
    254e:	cd b7       	in	r28, 0x3d	; 61
    2550:	de b7       	in	r29, 0x3e	; 62
    2552:	8a 83       	std	Y+2, r24	; 0x02
    2554:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    2556:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2558:	8b 81       	ldd	r24, Y+3	; 0x03
    255a:	88 30       	cpi	r24, 0x08	; 8
    255c:	08 f0       	brcs	.+2      	; 0x2560 <GPIO_readPin+0x1c>
    255e:	84 c0       	rjmp	.+264    	; 0x2668 <GPIO_readPin+0x124>
    2560:	8a 81       	ldd	r24, Y+2	; 0x02
    2562:	84 30       	cpi	r24, 0x04	; 4
    2564:	08 f0       	brcs	.+2      	; 0x2568 <GPIO_readPin+0x24>
    2566:	80 c0       	rjmp	.+256    	; 0x2668 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    2568:	8a 81       	ldd	r24, Y+2	; 0x02
    256a:	28 2f       	mov	r18, r24
    256c:	30 e0       	ldi	r19, 0x00	; 0
    256e:	3d 83       	std	Y+5, r19	; 0x05
    2570:	2c 83       	std	Y+4, r18	; 0x04
    2572:	4c 81       	ldd	r20, Y+4	; 0x04
    2574:	5d 81       	ldd	r21, Y+5	; 0x05
    2576:	41 30       	cpi	r20, 0x01	; 1
    2578:	51 05       	cpc	r21, r1
    257a:	79 f1       	breq	.+94     	; 0x25da <GPIO_readPin+0x96>
    257c:	8c 81       	ldd	r24, Y+4	; 0x04
    257e:	9d 81       	ldd	r25, Y+5	; 0x05
    2580:	82 30       	cpi	r24, 0x02	; 2
    2582:	91 05       	cpc	r25, r1
    2584:	34 f4       	brge	.+12     	; 0x2592 <GPIO_readPin+0x4e>
    2586:	2c 81       	ldd	r18, Y+4	; 0x04
    2588:	3d 81       	ldd	r19, Y+5	; 0x05
    258a:	21 15       	cp	r18, r1
    258c:	31 05       	cpc	r19, r1
    258e:	69 f0       	breq	.+26     	; 0x25aa <GPIO_readPin+0x66>
    2590:	6b c0       	rjmp	.+214    	; 0x2668 <GPIO_readPin+0x124>
    2592:	4c 81       	ldd	r20, Y+4	; 0x04
    2594:	5d 81       	ldd	r21, Y+5	; 0x05
    2596:	42 30       	cpi	r20, 0x02	; 2
    2598:	51 05       	cpc	r21, r1
    259a:	b9 f1       	breq	.+110    	; 0x260a <GPIO_readPin+0xc6>
    259c:	8c 81       	ldd	r24, Y+4	; 0x04
    259e:	9d 81       	ldd	r25, Y+5	; 0x05
    25a0:	83 30       	cpi	r24, 0x03	; 3
    25a2:	91 05       	cpc	r25, r1
    25a4:	09 f4       	brne	.+2      	; 0x25a8 <GPIO_readPin+0x64>
    25a6:	49 c0       	rjmp	.+146    	; 0x263a <GPIO_readPin+0xf6>
    25a8:	5f c0       	rjmp	.+190    	; 0x2668 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    25aa:	e9 e3       	ldi	r30, 0x39	; 57
    25ac:	f0 e0       	ldi	r31, 0x00	; 0
    25ae:	80 81       	ld	r24, Z
    25b0:	28 2f       	mov	r18, r24
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	8b 81       	ldd	r24, Y+3	; 0x03
    25b6:	88 2f       	mov	r24, r24
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	a9 01       	movw	r20, r18
    25bc:	02 c0       	rjmp	.+4      	; 0x25c2 <GPIO_readPin+0x7e>
    25be:	55 95       	asr	r21
    25c0:	47 95       	ror	r20
    25c2:	8a 95       	dec	r24
    25c4:	e2 f7       	brpl	.-8      	; 0x25be <GPIO_readPin+0x7a>
    25c6:	ca 01       	movw	r24, r20
    25c8:	81 70       	andi	r24, 0x01	; 1
    25ca:	90 70       	andi	r25, 0x00	; 0
    25cc:	88 23       	and	r24, r24
    25ce:	19 f0       	breq	.+6      	; 0x25d6 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    25d0:	81 e0       	ldi	r24, 0x01	; 1
    25d2:	89 83       	std	Y+1, r24	; 0x01
    25d4:	49 c0       	rjmp	.+146    	; 0x2668 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    25d6:	19 82       	std	Y+1, r1	; 0x01
    25d8:	47 c0       	rjmp	.+142    	; 0x2668 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    25da:	e6 e3       	ldi	r30, 0x36	; 54
    25dc:	f0 e0       	ldi	r31, 0x00	; 0
    25de:	80 81       	ld	r24, Z
    25e0:	28 2f       	mov	r18, r24
    25e2:	30 e0       	ldi	r19, 0x00	; 0
    25e4:	8b 81       	ldd	r24, Y+3	; 0x03
    25e6:	88 2f       	mov	r24, r24
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	a9 01       	movw	r20, r18
    25ec:	02 c0       	rjmp	.+4      	; 0x25f2 <GPIO_readPin+0xae>
    25ee:	55 95       	asr	r21
    25f0:	47 95       	ror	r20
    25f2:	8a 95       	dec	r24
    25f4:	e2 f7       	brpl	.-8      	; 0x25ee <GPIO_readPin+0xaa>
    25f6:	ca 01       	movw	r24, r20
    25f8:	81 70       	andi	r24, 0x01	; 1
    25fa:	90 70       	andi	r25, 0x00	; 0
    25fc:	88 23       	and	r24, r24
    25fe:	19 f0       	breq	.+6      	; 0x2606 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    2600:	81 e0       	ldi	r24, 0x01	; 1
    2602:	89 83       	std	Y+1, r24	; 0x01
    2604:	31 c0       	rjmp	.+98     	; 0x2668 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2606:	19 82       	std	Y+1, r1	; 0x01
    2608:	2f c0       	rjmp	.+94     	; 0x2668 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    260a:	e3 e3       	ldi	r30, 0x33	; 51
    260c:	f0 e0       	ldi	r31, 0x00	; 0
    260e:	80 81       	ld	r24, Z
    2610:	28 2f       	mov	r18, r24
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	8b 81       	ldd	r24, Y+3	; 0x03
    2616:	88 2f       	mov	r24, r24
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	a9 01       	movw	r20, r18
    261c:	02 c0       	rjmp	.+4      	; 0x2622 <GPIO_readPin+0xde>
    261e:	55 95       	asr	r21
    2620:	47 95       	ror	r20
    2622:	8a 95       	dec	r24
    2624:	e2 f7       	brpl	.-8      	; 0x261e <GPIO_readPin+0xda>
    2626:	ca 01       	movw	r24, r20
    2628:	81 70       	andi	r24, 0x01	; 1
    262a:	90 70       	andi	r25, 0x00	; 0
    262c:	88 23       	and	r24, r24
    262e:	19 f0       	breq	.+6      	; 0x2636 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    2630:	81 e0       	ldi	r24, 0x01	; 1
    2632:	89 83       	std	Y+1, r24	; 0x01
    2634:	19 c0       	rjmp	.+50     	; 0x2668 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2636:	19 82       	std	Y+1, r1	; 0x01
    2638:	17 c0       	rjmp	.+46     	; 0x2668 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    263a:	e0 e3       	ldi	r30, 0x30	; 48
    263c:	f0 e0       	ldi	r31, 0x00	; 0
    263e:	80 81       	ld	r24, Z
    2640:	28 2f       	mov	r18, r24
    2642:	30 e0       	ldi	r19, 0x00	; 0
    2644:	8b 81       	ldd	r24, Y+3	; 0x03
    2646:	88 2f       	mov	r24, r24
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	a9 01       	movw	r20, r18
    264c:	02 c0       	rjmp	.+4      	; 0x2652 <GPIO_readPin+0x10e>
    264e:	55 95       	asr	r21
    2650:	47 95       	ror	r20
    2652:	8a 95       	dec	r24
    2654:	e2 f7       	brpl	.-8      	; 0x264e <GPIO_readPin+0x10a>
    2656:	ca 01       	movw	r24, r20
    2658:	81 70       	andi	r24, 0x01	; 1
    265a:	90 70       	andi	r25, 0x00	; 0
    265c:	88 23       	and	r24, r24
    265e:	19 f0       	breq	.+6      	; 0x2666 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    2660:	81 e0       	ldi	r24, 0x01	; 1
    2662:	89 83       	std	Y+1, r24	; 0x01
    2664:	01 c0       	rjmp	.+2      	; 0x2668 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2666:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    2668:	89 81       	ldd	r24, Y+1	; 0x01
}
    266a:	0f 90       	pop	r0
    266c:	0f 90       	pop	r0
    266e:	0f 90       	pop	r0
    2670:	0f 90       	pop	r0
    2672:	0f 90       	pop	r0
    2674:	cf 91       	pop	r28
    2676:	df 91       	pop	r29
    2678:	08 95       	ret

0000267a <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    267a:	df 93       	push	r29
    267c:	cf 93       	push	r28
    267e:	00 d0       	rcall	.+0      	; 0x2680 <GPIO_setupPortDirection+0x6>
    2680:	00 d0       	rcall	.+0      	; 0x2682 <GPIO_setupPortDirection+0x8>
    2682:	cd b7       	in	r28, 0x3d	; 61
    2684:	de b7       	in	r29, 0x3e	; 62
    2686:	89 83       	std	Y+1, r24	; 0x01
    2688:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    268a:	89 81       	ldd	r24, Y+1	; 0x01
    268c:	84 30       	cpi	r24, 0x04	; 4
    268e:	90 f5       	brcc	.+100    	; 0x26f4 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2690:	89 81       	ldd	r24, Y+1	; 0x01
    2692:	28 2f       	mov	r18, r24
    2694:	30 e0       	ldi	r19, 0x00	; 0
    2696:	3c 83       	std	Y+4, r19	; 0x04
    2698:	2b 83       	std	Y+3, r18	; 0x03
    269a:	8b 81       	ldd	r24, Y+3	; 0x03
    269c:	9c 81       	ldd	r25, Y+4	; 0x04
    269e:	81 30       	cpi	r24, 0x01	; 1
    26a0:	91 05       	cpc	r25, r1
    26a2:	d1 f0       	breq	.+52     	; 0x26d8 <GPIO_setupPortDirection+0x5e>
    26a4:	2b 81       	ldd	r18, Y+3	; 0x03
    26a6:	3c 81       	ldd	r19, Y+4	; 0x04
    26a8:	22 30       	cpi	r18, 0x02	; 2
    26aa:	31 05       	cpc	r19, r1
    26ac:	2c f4       	brge	.+10     	; 0x26b8 <GPIO_setupPortDirection+0x3e>
    26ae:	8b 81       	ldd	r24, Y+3	; 0x03
    26b0:	9c 81       	ldd	r25, Y+4	; 0x04
    26b2:	00 97       	sbiw	r24, 0x00	; 0
    26b4:	61 f0       	breq	.+24     	; 0x26ce <GPIO_setupPortDirection+0x54>
    26b6:	1e c0       	rjmp	.+60     	; 0x26f4 <GPIO_setupPortDirection+0x7a>
    26b8:	2b 81       	ldd	r18, Y+3	; 0x03
    26ba:	3c 81       	ldd	r19, Y+4	; 0x04
    26bc:	22 30       	cpi	r18, 0x02	; 2
    26be:	31 05       	cpc	r19, r1
    26c0:	81 f0       	breq	.+32     	; 0x26e2 <GPIO_setupPortDirection+0x68>
    26c2:	8b 81       	ldd	r24, Y+3	; 0x03
    26c4:	9c 81       	ldd	r25, Y+4	; 0x04
    26c6:	83 30       	cpi	r24, 0x03	; 3
    26c8:	91 05       	cpc	r25, r1
    26ca:	81 f0       	breq	.+32     	; 0x26ec <GPIO_setupPortDirection+0x72>
    26cc:	13 c0       	rjmp	.+38     	; 0x26f4 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    26ce:	ea e3       	ldi	r30, 0x3A	; 58
    26d0:	f0 e0       	ldi	r31, 0x00	; 0
    26d2:	8a 81       	ldd	r24, Y+2	; 0x02
    26d4:	80 83       	st	Z, r24
    26d6:	0e c0       	rjmp	.+28     	; 0x26f4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    26d8:	e7 e3       	ldi	r30, 0x37	; 55
    26da:	f0 e0       	ldi	r31, 0x00	; 0
    26dc:	8a 81       	ldd	r24, Y+2	; 0x02
    26de:	80 83       	st	Z, r24
    26e0:	09 c0       	rjmp	.+18     	; 0x26f4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    26e2:	e4 e3       	ldi	r30, 0x34	; 52
    26e4:	f0 e0       	ldi	r31, 0x00	; 0
    26e6:	8a 81       	ldd	r24, Y+2	; 0x02
    26e8:	80 83       	st	Z, r24
    26ea:	04 c0       	rjmp	.+8      	; 0x26f4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    26ec:	e1 e3       	ldi	r30, 0x31	; 49
    26ee:	f0 e0       	ldi	r31, 0x00	; 0
    26f0:	8a 81       	ldd	r24, Y+2	; 0x02
    26f2:	80 83       	st	Z, r24
			break;
		}
	}
}
    26f4:	0f 90       	pop	r0
    26f6:	0f 90       	pop	r0
    26f8:	0f 90       	pop	r0
    26fa:	0f 90       	pop	r0
    26fc:	cf 91       	pop	r28
    26fe:	df 91       	pop	r29
    2700:	08 95       	ret

00002702 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2702:	df 93       	push	r29
    2704:	cf 93       	push	r28
    2706:	00 d0       	rcall	.+0      	; 0x2708 <GPIO_writePort+0x6>
    2708:	00 d0       	rcall	.+0      	; 0x270a <GPIO_writePort+0x8>
    270a:	cd b7       	in	r28, 0x3d	; 61
    270c:	de b7       	in	r29, 0x3e	; 62
    270e:	89 83       	std	Y+1, r24	; 0x01
    2710:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2712:	89 81       	ldd	r24, Y+1	; 0x01
    2714:	84 30       	cpi	r24, 0x04	; 4
    2716:	90 f5       	brcc	.+100    	; 0x277c <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    2718:	89 81       	ldd	r24, Y+1	; 0x01
    271a:	28 2f       	mov	r18, r24
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	3c 83       	std	Y+4, r19	; 0x04
    2720:	2b 83       	std	Y+3, r18	; 0x03
    2722:	8b 81       	ldd	r24, Y+3	; 0x03
    2724:	9c 81       	ldd	r25, Y+4	; 0x04
    2726:	81 30       	cpi	r24, 0x01	; 1
    2728:	91 05       	cpc	r25, r1
    272a:	d1 f0       	breq	.+52     	; 0x2760 <GPIO_writePort+0x5e>
    272c:	2b 81       	ldd	r18, Y+3	; 0x03
    272e:	3c 81       	ldd	r19, Y+4	; 0x04
    2730:	22 30       	cpi	r18, 0x02	; 2
    2732:	31 05       	cpc	r19, r1
    2734:	2c f4       	brge	.+10     	; 0x2740 <GPIO_writePort+0x3e>
    2736:	8b 81       	ldd	r24, Y+3	; 0x03
    2738:	9c 81       	ldd	r25, Y+4	; 0x04
    273a:	00 97       	sbiw	r24, 0x00	; 0
    273c:	61 f0       	breq	.+24     	; 0x2756 <GPIO_writePort+0x54>
    273e:	1e c0       	rjmp	.+60     	; 0x277c <GPIO_writePort+0x7a>
    2740:	2b 81       	ldd	r18, Y+3	; 0x03
    2742:	3c 81       	ldd	r19, Y+4	; 0x04
    2744:	22 30       	cpi	r18, 0x02	; 2
    2746:	31 05       	cpc	r19, r1
    2748:	81 f0       	breq	.+32     	; 0x276a <GPIO_writePort+0x68>
    274a:	8b 81       	ldd	r24, Y+3	; 0x03
    274c:	9c 81       	ldd	r25, Y+4	; 0x04
    274e:	83 30       	cpi	r24, 0x03	; 3
    2750:	91 05       	cpc	r25, r1
    2752:	81 f0       	breq	.+32     	; 0x2774 <GPIO_writePort+0x72>
    2754:	13 c0       	rjmp	.+38     	; 0x277c <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    2756:	eb e3       	ldi	r30, 0x3B	; 59
    2758:	f0 e0       	ldi	r31, 0x00	; 0
    275a:	8a 81       	ldd	r24, Y+2	; 0x02
    275c:	80 83       	st	Z, r24
    275e:	0e c0       	rjmp	.+28     	; 0x277c <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    2760:	e8 e3       	ldi	r30, 0x38	; 56
    2762:	f0 e0       	ldi	r31, 0x00	; 0
    2764:	8a 81       	ldd	r24, Y+2	; 0x02
    2766:	80 83       	st	Z, r24
    2768:	09 c0       	rjmp	.+18     	; 0x277c <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    276a:	e5 e3       	ldi	r30, 0x35	; 53
    276c:	f0 e0       	ldi	r31, 0x00	; 0
    276e:	8a 81       	ldd	r24, Y+2	; 0x02
    2770:	80 83       	st	Z, r24
    2772:	04 c0       	rjmp	.+8      	; 0x277c <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    2774:	e2 e3       	ldi	r30, 0x32	; 50
    2776:	f0 e0       	ldi	r31, 0x00	; 0
    2778:	8a 81       	ldd	r24, Y+2	; 0x02
    277a:	80 83       	st	Z, r24
			break;
		}
	}
}
    277c:	0f 90       	pop	r0
    277e:	0f 90       	pop	r0
    2780:	0f 90       	pop	r0
    2782:	0f 90       	pop	r0
    2784:	cf 91       	pop	r28
    2786:	df 91       	pop	r29
    2788:	08 95       	ret

0000278a <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    278a:	df 93       	push	r29
    278c:	cf 93       	push	r28
    278e:	00 d0       	rcall	.+0      	; 0x2790 <GPIO_readPort+0x6>
    2790:	00 d0       	rcall	.+0      	; 0x2792 <GPIO_readPort+0x8>
    2792:	cd b7       	in	r28, 0x3d	; 61
    2794:	de b7       	in	r29, 0x3e	; 62
    2796:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    2798:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    279a:	8a 81       	ldd	r24, Y+2	; 0x02
    279c:	84 30       	cpi	r24, 0x04	; 4
    279e:	90 f5       	brcc	.+100    	; 0x2804 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    27a0:	8a 81       	ldd	r24, Y+2	; 0x02
    27a2:	28 2f       	mov	r18, r24
    27a4:	30 e0       	ldi	r19, 0x00	; 0
    27a6:	3c 83       	std	Y+4, r19	; 0x04
    27a8:	2b 83       	std	Y+3, r18	; 0x03
    27aa:	8b 81       	ldd	r24, Y+3	; 0x03
    27ac:	9c 81       	ldd	r25, Y+4	; 0x04
    27ae:	81 30       	cpi	r24, 0x01	; 1
    27b0:	91 05       	cpc	r25, r1
    27b2:	d1 f0       	breq	.+52     	; 0x27e8 <GPIO_readPort+0x5e>
    27b4:	2b 81       	ldd	r18, Y+3	; 0x03
    27b6:	3c 81       	ldd	r19, Y+4	; 0x04
    27b8:	22 30       	cpi	r18, 0x02	; 2
    27ba:	31 05       	cpc	r19, r1
    27bc:	2c f4       	brge	.+10     	; 0x27c8 <GPIO_readPort+0x3e>
    27be:	8b 81       	ldd	r24, Y+3	; 0x03
    27c0:	9c 81       	ldd	r25, Y+4	; 0x04
    27c2:	00 97       	sbiw	r24, 0x00	; 0
    27c4:	61 f0       	breq	.+24     	; 0x27de <GPIO_readPort+0x54>
    27c6:	1e c0       	rjmp	.+60     	; 0x2804 <GPIO_readPort+0x7a>
    27c8:	2b 81       	ldd	r18, Y+3	; 0x03
    27ca:	3c 81       	ldd	r19, Y+4	; 0x04
    27cc:	22 30       	cpi	r18, 0x02	; 2
    27ce:	31 05       	cpc	r19, r1
    27d0:	81 f0       	breq	.+32     	; 0x27f2 <GPIO_readPort+0x68>
    27d2:	8b 81       	ldd	r24, Y+3	; 0x03
    27d4:	9c 81       	ldd	r25, Y+4	; 0x04
    27d6:	83 30       	cpi	r24, 0x03	; 3
    27d8:	91 05       	cpc	r25, r1
    27da:	81 f0       	breq	.+32     	; 0x27fc <GPIO_readPort+0x72>
    27dc:	13 c0       	rjmp	.+38     	; 0x2804 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    27de:	e9 e3       	ldi	r30, 0x39	; 57
    27e0:	f0 e0       	ldi	r31, 0x00	; 0
    27e2:	80 81       	ld	r24, Z
    27e4:	89 83       	std	Y+1, r24	; 0x01
    27e6:	0e c0       	rjmp	.+28     	; 0x2804 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    27e8:	e6 e3       	ldi	r30, 0x36	; 54
    27ea:	f0 e0       	ldi	r31, 0x00	; 0
    27ec:	80 81       	ld	r24, Z
    27ee:	89 83       	std	Y+1, r24	; 0x01
    27f0:	09 c0       	rjmp	.+18     	; 0x2804 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    27f2:	e3 e3       	ldi	r30, 0x33	; 51
    27f4:	f0 e0       	ldi	r31, 0x00	; 0
    27f6:	80 81       	ld	r24, Z
    27f8:	89 83       	std	Y+1, r24	; 0x01
    27fa:	04 c0       	rjmp	.+8      	; 0x2804 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    27fc:	e0 e3       	ldi	r30, 0x30	; 48
    27fe:	f0 e0       	ldi	r31, 0x00	; 0
    2800:	80 81       	ld	r24, Z
    2802:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2804:	89 81       	ldd	r24, Y+1	; 0x01
}
    2806:	0f 90       	pop	r0
    2808:	0f 90       	pop	r0
    280a:	0f 90       	pop	r0
    280c:	0f 90       	pop	r0
    280e:	cf 91       	pop	r28
    2810:	df 91       	pop	r29
    2812:	08 95       	ret

00002814 <__udivmodhi4>:
    2814:	aa 1b       	sub	r26, r26
    2816:	bb 1b       	sub	r27, r27
    2818:	51 e1       	ldi	r21, 0x11	; 17
    281a:	07 c0       	rjmp	.+14     	; 0x282a <__udivmodhi4_ep>

0000281c <__udivmodhi4_loop>:
    281c:	aa 1f       	adc	r26, r26
    281e:	bb 1f       	adc	r27, r27
    2820:	a6 17       	cp	r26, r22
    2822:	b7 07       	cpc	r27, r23
    2824:	10 f0       	brcs	.+4      	; 0x282a <__udivmodhi4_ep>
    2826:	a6 1b       	sub	r26, r22
    2828:	b7 0b       	sbc	r27, r23

0000282a <__udivmodhi4_ep>:
    282a:	88 1f       	adc	r24, r24
    282c:	99 1f       	adc	r25, r25
    282e:	5a 95       	dec	r21
    2830:	a9 f7       	brne	.-22     	; 0x281c <__udivmodhi4_loop>
    2832:	80 95       	com	r24
    2834:	90 95       	com	r25
    2836:	bc 01       	movw	r22, r24
    2838:	cd 01       	movw	r24, r26
    283a:	08 95       	ret

0000283c <__udivmodsi4>:
    283c:	a1 e2       	ldi	r26, 0x21	; 33
    283e:	1a 2e       	mov	r1, r26
    2840:	aa 1b       	sub	r26, r26
    2842:	bb 1b       	sub	r27, r27
    2844:	fd 01       	movw	r30, r26
    2846:	0d c0       	rjmp	.+26     	; 0x2862 <__udivmodsi4_ep>

00002848 <__udivmodsi4_loop>:
    2848:	aa 1f       	adc	r26, r26
    284a:	bb 1f       	adc	r27, r27
    284c:	ee 1f       	adc	r30, r30
    284e:	ff 1f       	adc	r31, r31
    2850:	a2 17       	cp	r26, r18
    2852:	b3 07       	cpc	r27, r19
    2854:	e4 07       	cpc	r30, r20
    2856:	f5 07       	cpc	r31, r21
    2858:	20 f0       	brcs	.+8      	; 0x2862 <__udivmodsi4_ep>
    285a:	a2 1b       	sub	r26, r18
    285c:	b3 0b       	sbc	r27, r19
    285e:	e4 0b       	sbc	r30, r20
    2860:	f5 0b       	sbc	r31, r21

00002862 <__udivmodsi4_ep>:
    2862:	66 1f       	adc	r22, r22
    2864:	77 1f       	adc	r23, r23
    2866:	88 1f       	adc	r24, r24
    2868:	99 1f       	adc	r25, r25
    286a:	1a 94       	dec	r1
    286c:	69 f7       	brne	.-38     	; 0x2848 <__udivmodsi4_loop>
    286e:	60 95       	com	r22
    2870:	70 95       	com	r23
    2872:	80 95       	com	r24
    2874:	90 95       	com	r25
    2876:	9b 01       	movw	r18, r22
    2878:	ac 01       	movw	r20, r24
    287a:	bd 01       	movw	r22, r26
    287c:	cf 01       	movw	r24, r30
    287e:	08 95       	ret

00002880 <__prologue_saves__>:
    2880:	2f 92       	push	r2
    2882:	3f 92       	push	r3
    2884:	4f 92       	push	r4
    2886:	5f 92       	push	r5
    2888:	6f 92       	push	r6
    288a:	7f 92       	push	r7
    288c:	8f 92       	push	r8
    288e:	9f 92       	push	r9
    2890:	af 92       	push	r10
    2892:	bf 92       	push	r11
    2894:	cf 92       	push	r12
    2896:	df 92       	push	r13
    2898:	ef 92       	push	r14
    289a:	ff 92       	push	r15
    289c:	0f 93       	push	r16
    289e:	1f 93       	push	r17
    28a0:	cf 93       	push	r28
    28a2:	df 93       	push	r29
    28a4:	cd b7       	in	r28, 0x3d	; 61
    28a6:	de b7       	in	r29, 0x3e	; 62
    28a8:	ca 1b       	sub	r28, r26
    28aa:	db 0b       	sbc	r29, r27
    28ac:	0f b6       	in	r0, 0x3f	; 63
    28ae:	f8 94       	cli
    28b0:	de bf       	out	0x3e, r29	; 62
    28b2:	0f be       	out	0x3f, r0	; 63
    28b4:	cd bf       	out	0x3d, r28	; 61
    28b6:	09 94       	ijmp

000028b8 <__epilogue_restores__>:
    28b8:	2a 88       	ldd	r2, Y+18	; 0x12
    28ba:	39 88       	ldd	r3, Y+17	; 0x11
    28bc:	48 88       	ldd	r4, Y+16	; 0x10
    28be:	5f 84       	ldd	r5, Y+15	; 0x0f
    28c0:	6e 84       	ldd	r6, Y+14	; 0x0e
    28c2:	7d 84       	ldd	r7, Y+13	; 0x0d
    28c4:	8c 84       	ldd	r8, Y+12	; 0x0c
    28c6:	9b 84       	ldd	r9, Y+11	; 0x0b
    28c8:	aa 84       	ldd	r10, Y+10	; 0x0a
    28ca:	b9 84       	ldd	r11, Y+9	; 0x09
    28cc:	c8 84       	ldd	r12, Y+8	; 0x08
    28ce:	df 80       	ldd	r13, Y+7	; 0x07
    28d0:	ee 80       	ldd	r14, Y+6	; 0x06
    28d2:	fd 80       	ldd	r15, Y+5	; 0x05
    28d4:	0c 81       	ldd	r16, Y+4	; 0x04
    28d6:	1b 81       	ldd	r17, Y+3	; 0x03
    28d8:	aa 81       	ldd	r26, Y+2	; 0x02
    28da:	b9 81       	ldd	r27, Y+1	; 0x01
    28dc:	ce 0f       	add	r28, r30
    28de:	d1 1d       	adc	r29, r1
    28e0:	0f b6       	in	r0, 0x3f	; 63
    28e2:	f8 94       	cli
    28e4:	de bf       	out	0x3e, r29	; 62
    28e6:	0f be       	out	0x3f, r0	; 63
    28e8:	cd bf       	out	0x3d, r28	; 61
    28ea:	ed 01       	movw	r28, r26
    28ec:	08 95       	ret

000028ee <_exit>:
    28ee:	f8 94       	cli

000028f0 <__stop_program>:
    28f0:	ff cf       	rjmp	.-2      	; 0x28f0 <__stop_program>
